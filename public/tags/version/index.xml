<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Version on Korolev Blog</title>
    <link>http://localhost:1313/tags/version/</link>
    <description>Recent content in Version on Korolev Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 10 Jul 2025 00:00:00 -0700</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/version/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Keep everything in version control</title>
      <link>http://localhost:1313/posts/keep-everything-in-version-control/</link>
      <pubDate>Thu, 10 Jul 2025 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/keep-everything-in-version-control/</guid>
      <description>Store everything related to any of your projects in a version control system. The necessary resources are already available: free tools like Subversion, Git, Mercurial, and CVS, ample disk space, cheap and powerful servers, ubiquitous Internet access, and even project hosting services. Once you have installed the version control system, saving your work in the repository is very simple: just execute the corresponding command in the clean directory with the code. And you only need to master two new basic operations: committing (commit) changes you made in the code to the repository, and updating (update) your working version of the project to the one in the repository.&#xA;Once the project is placed in the version control system, you can easily view its history, find out who wrote each piece of code, and refer to a specific version of a file or project using a unique identifier.</description>
    </item>
    <item>
      <title>Before blaming others, check your own code</title>
      <link>http://localhost:1313/posts/before-blaming-others-check-your-own-code/</link>
      <pubDate>Mon, 19 Aug 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/before-blaming-others-check-your-own-code/</guid>
      <description>A developer – any of us! – often finds it difficult to admit that their code doesn&amp;rsquo;t work. It seems so implausible that we are more likely to assume there is a bug in the compiler.&#xA;In reality, it is very, very rare for code to be non-functional due to a bug in the compiler, interpreter, operating system, application server, database, memory manager, or any other element of system software. Yes, there are bugs, but they are much less frequent than we would like to think.&#xA;Once, I actually encountered a bug in the compiler (removing the loop variable during optimization), but in all other cases, my complaints about the compiler or operating system turned out to be unfounded. I wasted a lot of my time, support staff time, and management time, only to end up in an awkward position when it turned out that the mistake was my own.</description>
    </item>
    <item>
      <title>One binary file</title>
      <link>http://localhost:1313/posts/one-binary-file/</link>
      <pubDate>Mon, 15 Jul 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/one-binary-file/</guid>
      <description>I have encountered projects where part of the code was rewritten during the build process so that a separate binary file was generated for each runtime environment. This approach always complicates things unnecessarily and creates the risk of incompatible versions appearing with each installation. At the very least, several almost identical instances of the program are built, each intended for installation in its corresponding environment. Too many moving parts arise, which means more opportunities for error.&#xA;Once, I worked in a team where after every property change, it was necessary to save the code and conduct a full build cycle, so the testers were idle every time a minor bug was found (did I mention that the project also took an incredibly long time to build?</description>
    </item>
  </channel>
</rss>
