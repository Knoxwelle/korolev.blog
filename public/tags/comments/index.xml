<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Comments on Korolev Blog</title>
    <link>http://localhost:1313/tags/comments/</link>
    <description>Recent content in Comments on Korolev Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 02 Oct 2024 00:00:00 -0700</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/comments/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Comment only on what the code not say</title>
      <link>http://localhost:1313/posts/comment-only-on-what-the-code-not-say/</link>
      <pubDate>Wed, 02 Oct 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/comment-only-on-what-the-code-not-say/</guid>
      <description>The discrepancy between theory and practice is greater in practice than in theory. This observation definitely applies to comments. In theory, the general idea of commenting code looks commendable: to give colleagues a detailed explanation of what is happening. What could be more useful than providing useful information? But in practice, comments often do more harm than good. Like any form of writing, writing comments requires skill. This skill largely involves understanding when not to write comments.&#xA;If the code is written with syntax errors, compilers, interpreters, and other development tools will definitely object. If the code is functionally incorrect, most of the errors will be identified through review, static analysis, testing, and real-world deployment in a commercial enterprise. And what about comments? In the book &amp;ldquo;The Elements of Programming Style&amp;rdquo; (Computing McGraw-Hill), Kernighan and Plauger note that &amp;ldquo;a wrong comment has zero or negative value.</description>
    </item>
    <item>
      <title>Only the code will tell the truth</title>
      <link>http://localhost:1313/posts/only-the-code-will-tell-the-truth/</link>
      <pubDate>Mon, 20 May 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/only-the-code-will-tell-the-truth/</guid>
      <description>In the end, the semantics of a program are defined by the working code. If you only have it in the form of a binary file, it will be difficult to read! However, the source code is usually available if it is your own program, a typical commercial development, an open-source project, or a program in a dynamically interpreted language. When reading the source code, the meaning of the program should be obvious. You can confidently know what the program does just by looking at the source code. Even the most precise description of technical requirements will not tell the whole truth: it contains not a detailed description of what the program actually does, but general wishes of the requirements compiler. An architecture document may contain a description of the planned architecture, but it will not describe the necessary implementation details.</description>
    </item>
    <item>
      <title>Commentary on comments</title>
      <link>http://localhost:1313/posts/commentary-on-comments/</link>
      <pubDate>Tue, 12 Mar 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/commentary-on-comments/</guid>
      <description>At my first programming class at the university, the instructor handed out two sheets for us to write the program text in BASIC. On the board, he wrote the assignment: &amp;ldquo;Create a program to input and calculate the average of 10 bowling scores.&amp;rdquo; Then the teacher left the room. Is this task difficult? I don&amp;rsquo;t remember my solution, but it seems there was a FOR/NEXT loop and no more than 15 lines of code.&#xA;In each form for the program code, we would write the code by hand before entering it into the computer â€“ it was about 70 lines. I had no idea why the teacher gave us two forms each. Since my handwriting has always been terrible, I used the second form to neatly rewrite my code, hoping to earn a couple of points for style.</description>
    </item>
  </channel>
</rss>
