<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Application on Korolev Blog</title>
    <link>http://localhost:1313/tags/application/</link>
    <description>Recent content in Application on Korolev Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 13 Jan 2025 00:00:00 -0700</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/application/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The performance of an application is determined by its architecture</title>
      <link>http://localhost:1313/posts/the-performance-of-an-application-is-determined-by-its-architecture/</link>
      <pubDate>Mon, 13 Jan 2025 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/the-performance-of-an-application-is-determined-by-its-architecture/</guid>
      <description>The performance of an application is determined by its architecture. At first glance, it seems that this statement should be obvious, but real-world experience shows otherwise. For example, software architects often believe that application performance issues can be resolved simply by switching to software infrastructure from another vendor. The source of this belief may be the advertising hype surrounding testing results – for example, it is claimed that the leading company&amp;rsquo;s product outperforms the nearest competitor by a certain percentage. However, if the leading product performs an operation in 3 milliseconds, while the competing product does it in 4 milliseconds, the claimed percentage (one millisecond) means very little against the backdrop of overall low performance rooted in architectural inefficiency.&#xA;Besides IT managers and performance testing teams, there are and other groups of people, such as the support service of the development company and authors of books on application performance management, which they recommend fine-tuning the application infrastructure: play with memory allocation operations, connection pool sizes, the sizes of thread pools and so on.</description>
    </item>
    <item>
      <title>Carefully choose your tools</title>
      <link>http://localhost:1313/posts/carefully-choose-your-tools/</link>
      <pubDate>Tue, 03 Dec 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/carefully-choose-your-tools/</guid>
      <description>Modern applications are extremely rarely created &amp;ldquo;from scratch.&amp;rdquo; They are assembled from already existing building blocks – components, libraries, and frameworks, and there are several compelling reasons for this:&#xA;The volume, complexity, and sophistication of applications are increasing, while the time allocated for their creation is decreasing. It is more beneficial to spend the time and intellect of developers on business logic code rather than application infrastructure code. - Widely used components and frameworks have fewer chances of encountering errors compared to those developed independently. - High-quality tools are available for free on the Internet, which reduces development costs and simplifies the search for interested developers with the necessary experience. - The creation and maintenance of software require a significant amount of human labor, so it can be cheaper to buy ready-made products than to create them.</description>
    </item>
    <item>
      <title>Relational Database Management Systems</title>
      <link>http://localhost:1313/posts/relational-database-management-systems/</link>
      <pubDate>Sun, 09 Jun 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/relational-database-management-systems/</guid>
      <description>If your application needs to handle a large, long-lived set of interrelated data elements, you can confidently place it in a relational database. In the past, there were few relational DBMSs; they were complex, expensive to maintain, and clunky beasts. Those times are gone. Today, finding a relational DBMS is not difficult: it is quite possible that a relational DBMS or even two are already installed on your machine. Some very advanced relational DBMSs, such like MySQL and PostgreSQL, are available in source code, so the question of costs it is no longer worth buying them. Moreover, the so-called &amp;ldquo;embedded database systems&amp;rdquo; can be integrated into your application as libraries, almost requiring no configuration and administration; two such examples are interesting open-source DBMS, SQLite and HSQLDB.</description>
    </item>
  </channel>
</rss>
