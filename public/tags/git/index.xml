<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on Korolev Blog</title>
    <link>http://localhost:1313/tags/git/</link>
    <description>Recent content in Git on Korolev Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 19 Jan 2025 00:00:00 -0700</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/git/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>One binary file</title>
      <link>http://localhost:1313/posts/one-binary-file/</link>
      <pubDate>Sun, 19 Jan 2025 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/one-binary-file/</guid>
      <description>I have encountered projects where part of the code was rewritten during the build process so that a separate binary file was generated for each runtime environment. This approach always complicates things unnecessarily and creates the risk of incompatible versions appearing with each installation. At the very least, several almost identical instances of the program are built, each intended for installation in its corresponding environment. Too many moving parts arise, which means more opportunities for error.&#xA;Once, I worked in a team where after every property change, it was necessary to save the code and conduct a full build cycle, so the testers were idle every time a minor bug was found (did I mention that the project also took an incredibly long time to build?</description>
    </item>
    <item>
      <title>Keep everything in version control</title>
      <link>http://localhost:1313/posts/keep-everything-in-version-control/</link>
      <pubDate>Sun, 05 May 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/keep-everything-in-version-control/</guid>
      <description>Store everything related to any of your projects in a version control system. The necessary resources are already available: free tools like Subversion, Git, Mercurial, and CVS, ample disk space, cheap and powerful servers, ubiquitous Internet access, and even project hosting services. Once you have installed the version control system, saving your work in the repository is very simple: just execute the corresponding command in the clean directory with the code. And you only need to master two new basic operations: committing (commit) changes you made in the code to the repository, and updating (update) your working version of the project to the one in the repository.&#xA;Once the project is placed in the version control system, you can easily view its history, find out who wrote each piece of code, and refer to a specific version of a file or project using a unique identifier.</description>
    </item>
  </channel>
</rss>
