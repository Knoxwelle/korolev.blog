<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>User on Korolev Blog</title>
    <link>http://localhost:1313/tags/user/</link>
    <description>Recent content in User on Korolev Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 08 Jul 2025 00:00:00 -0700</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/user/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Prevent the occurrence of errors</title>
      <link>http://localhost:1313/posts/prevent-the-occurrence-of-errors/</link>
      <pubDate>Tue, 08 Jul 2025 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/prevent-the-occurrence-of-errors/</guid>
      <description>Error messages are the most critical form of interaction between the user and the system. They arise when the user&amp;rsquo;s communication with the system is on the verge of breaking down.&#xA;It is easiest to assume that errors occur due to user fault from entering incorrect data. However, the mistakes people make are predictable and happen systematically. Therefore, you can &amp;ldquo;debug&amp;rdquo; the interaction between the user and the system just as you debug the interaction between other components of the system.&#xA;Let&amp;rsquo;s say the user needs to enter a date within a specific range. Instead of allowing them to enter any date, wouldn&amp;rsquo;t it be better to provide a tool like a list or calendar that shows only the permissible dates? This would eliminate any possibility of entering a date outside the allowed range.</description>
    </item>
    <item>
      <title>Interfaces</title>
      <link>http://localhost:1313/posts/interfaces/</link>
      <pubDate>Fri, 14 Feb 2025 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/interfaces/</guid>
      <description>One of the most common tasks in software development is interface specification. Interfaces exist at the highest level of abstraction (user interfaces), at the lowest level (function interfaces), and at intermediate levels (class interfaces, libraries, etc.). Regardless of what you are doing—aligning with end users on their future interaction with the system, collaborating with developers to develop the API specification, or declaring private class functions—interface design is an important part of your job. If you handle it well, using your interfaces will be a pure pleasure, and user productivity will increase. If you handle the task poorly, your interfaces will become a source of frustration and errors.&#xA;Good interfaces possess the following properties:&#xA;They are easy to use correctly. Users of a well-designed interface almost always use it correctly because that is the path of least resistance for that interface.</description>
    </item>
  </channel>
</rss>
