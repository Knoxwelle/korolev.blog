<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Solution on Tiny Dev Blog</title>
    <link>http://localhost:1313/tags/solution/</link>
    <description>Recent content in Solution on Tiny Dev Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 11 Jul 2024 00:00:00 -0700</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/solution/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Never prioritize your resume over the needs of the client</title>
      <link>http://localhost:1313/posts/never-prioritize-your-resume-over-the-needs-of-the-client/</link>
      <pubDate>Thu, 11 Jul 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/never-prioritize-your-resume-over-the-needs-of-the-client/</guid>
      <description>As technicians, we select specific technologies, tactics, and methods to address issues not because they offer the best solution but rather because we sincerely want to include them in our synopsis. Making such a decision almost never has favorable outcomes.&#xA;Because you have done so successfully for them, your grateful clients who are waiting in line to refer you to others will be the most potent career catalyst. You will get better service from the kind clients than from any newly created paradigm or trendy object in the new language. Even though staying current with emerging ideas and technology is crucial for architects, you should never try to take on more work at the client&amp;rsquo;s expense. As architects, you should never forget that you are responsible for the success of your organization.</description>
    </item>
    <item>
      <title>Find the true meaning of the needs</title>
      <link>http://localhost:1313/posts/find-the-true-meaning-of-the-needs/</link>
      <pubDate>Tue, 18 Jun 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/find-the-true-meaning-of-the-needs/</guid>
      <description>Clients and end users frequently insist on what they perceive to be a workable solution to an issue. Leading F-16 Falcon designer Harry Hillaker provides a prime illustration of this. His team&amp;rsquo;s mission was to construct an airplane that could reach M2-2.5 speeds. This was (and probably still is) a tremendously difficult undertaking, especially if the secondary goal was to build a light aircraft that was &amp;ldquo;cheap.&amp;rdquo;&#xA;The Air Force clients told the design team that they required the M2–2.5 speed so that the aircraft could escape combat if necessary. The primary issue was resolved, and a feasible solution was presented by the designers when the true necessity became evident. This was in the form of a mobile aircraft with strong traction that offered good acceleration and maneuverability rather than a high top speed.</description>
    </item>
    <item>
      <title>There are no solutions for all cases of life</title>
      <link>http://localhost:1313/posts/there-are-no-solutions-for-all-cases-of-life/</link>
      <pubDate>Tue, 28 May 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/there-are-no-solutions-for-all-cases-of-life/</guid>
      <description>Since there isn&amp;rsquo;t a single, all-encompassing solution for a broad variety of various challenges, the architect must constantly hone and enhance his &amp;ldquo;context noe poche.&amp;rdquo; In &amp;ldquo;Systems Architecting: Creating &amp;amp; Building Complex Systems&amp;rdquo; (Prentice Hall, 1991), Eberhardt Rechtin writes:&#xA;Most likely, he would say, &amp;ldquo;I&amp;rsquo;m just using common sense.&amp;rdquo; &amp;lt;&amp;hellip;&amp;gt; It might be preferable to use the phrase &amp;ldquo;context sensation&amp;quot;1—knowledge of what is relevant in a certain context—instead of the word &amp;ldquo;sensual.&amp;rdquo; Through education, experience, and case studies, the architect-practitioner can develop a strong contextual awareness by the time they are asked to tackle a system-level issue, which typically takes decades.&#xA;I believe that one of the main issues facing the software business is that projects are frequently assigned to individuals who lack sufficient contextual awareness.</description>
    </item>
    <item>
      <title>Simplicity is better than versatility</title>
      <link>http://localhost:1313/posts/simplicity-is-better-than-versatility/</link>
      <pubDate>Mon, 20 May 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/simplicity-is-better-than-versatility/</guid>
      <description>The fact that many frameworks, class libraries, basic services, and other infrastructure code are made to be used universally and aren&amp;rsquo;t tied to any particular application is a common issue with them. The majority of developers specialize in particular systems; therefore, trying to be as versatile as possible is rarely beneficial to them. The greatest approach to reaching universality is not by universality based on supposition but rather by a thorough comprehension of known concrete cases and a study of their essence to uncover a fundamental common solution. Simplicity is the outcome of practical experience.&#xA;Simplifying an architectural design over adding more features makes it easier to choose between two options that are equivalent in every other way. Choose a more straightforward and needs-based solution over a more complex and adaptable one when there are two options.</description>
    </item>
  </channel>
</rss>
