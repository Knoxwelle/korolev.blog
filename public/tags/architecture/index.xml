<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Architecture on Tiny Dev Blog</title>
    <link>http://localhost:1313/tags/architecture/</link>
    <description>Recent content in Architecture on Tiny Dev Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 10 Aug 2024 00:00:00 -0700</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/architecture/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Application performance determined by architecture</title>
      <link>http://localhost:1313/posts/application-performance-determined-by-architecture/</link>
      <pubDate>Sat, 10 Aug 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/application-performance-determined-by-architecture/</guid>
      <description>The performance of an application is determined by its architecture. At first glance, this assertion seems obvious, but real-life experience shows the opposite. For example, software architects often believe that application performance problems can be solved by simply switching to the software infrastructure from another manufacturer. The source of this belief may be a river of noise around the test results; for example, it is stated that the product of the leading company is 25% superior in performance to the nearest competitor. However, if the leader product performs the operation in 3 milliseconds and the competitor product in 4 milliseconds, the stated 25% (one millisection) means very little against the background of the overall low performance, which is rooted in architecture inefficiency. In addition to IT managers and performance testing teams, there are other groups of people, such as the developer&amp;rsquo;s support service and the authors of the app performance management books, who recommend that you do the subtle configuration of the application&amp;rsquo;s infrastructure: play with memory allocation operations, connectivity pool sizes, flow pool size, and so on.</description>
    </item>
    <item>
      <title>Communication is the king, clarity and leadership are his true companions</title>
      <link>http://localhost:1313/posts/%D0%B0%D1%80%D1%85%D0%B8%D1%82%D0%B5%D0%BA%D1%82%D1%83%D1%80%D0%BD%D1%8B%D0%B5-%D0%BA%D0%BE%D0%BC%D0%BF%D1%80%D0%BE%D0%BC%D0%B8%D1%81%D1%81%D1%8B/</link>
      <pubDate>Fri, 12 Jul 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/%D0%B0%D1%80%D1%85%D0%B8%D1%82%D0%B5%D0%BA%D1%82%D1%83%D1%80%D0%BD%D1%8B%D0%B5-%D0%BA%D0%BE%D0%BC%D0%BF%D1%80%D0%BE%D0%BC%D0%B8%D1%81%D1%81%D1%8B/</guid>
      <description>Every software architect should know and understand that you can&amp;rsquo;t get everything at once. In practice, it is impossible to design an architecture that has high performance, high availability, high security and high abstraction at the same time.There is one real story that software architects need to know, understand and tell their clients and colleagues.I mean the history of the Vaza.&#xA;In 1620, there was a war between Sweden and Poland. Wishing to put an end to this expensive war more quickly, the King of Sweden ordered the construction of a gallion called the Vase.It was an unusual ship.The requirements for it were not the same as for any other ship of the time.It was to be more than 60 metres long, carry 64 guns on two battery deck, and also carry 300 soldiers at a time for safe delivery to Poland by sea.</description>
    </item>
    <item>
      <title>Руководствуйтесь неопределённостью</title>
      <link>http://localhost:1313/posts/%D1%80%D1%83%D0%BA%D0%BE%D0%B2%D0%BE%D0%B4%D1%81%D1%82%D0%B2%D1%83%D0%B9%D1%82%D0%B5%D1%81%D1%8C-%D0%BD%D0%B5%D0%BE%D0%BF%D1%80%D0%B5%D0%B4%D0%B5%D0%BB%D1%91%D0%BD%D0%BD%D0%BE%D1%81%D1%82%D1%8C%D1%8E/</link>
      <pubDate>Sat, 06 Jul 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/%D1%80%D1%83%D0%BA%D0%BE%D0%B2%D0%BE%D0%B4%D1%81%D1%82%D0%B2%D1%83%D0%B9%D1%82%D0%B5%D1%81%D1%8C-%D0%BD%D0%B5%D0%BE%D0%BF%D1%80%D0%B5%D0%B4%D0%B5%D0%BB%D1%91%D0%BD%D0%BD%D0%BE%D1%81%D1%82%D1%8C%D1%8E/</guid>
      <description>When faced with alternatives, people tend to believe that the most important thing is to make the right choice.In design (software products or anything else) this is not the case.The presence of an alternative is a sign that uncertainty in the design of the system needs to be analysed. Use uncertainty as a determining factor to identify places where you can postpone the transition to details or apply breakdown and abstraction to reduce the importance of design decisions.If you strictly “sew” in the system the first decision that came to your mind, it is likely to tie your hands in the future.As a result, random decisions will begin to play an important role, and the flexibility of the software product will decrease.&#xA;One of the simplest and most constructive definitions of architecture was given by Grady Booch: &amp;ldquo;Any architecture is the result of design, but not every design is aimed at creating architecture.</description>
    </item>
    <item>
      <title>Думать о производительности никогда не рано</title>
      <link>http://localhost:1313/posts/%D0%B4%D1%83%D0%BC%D0%B0%D1%82%D1%8C-%D0%BE-%D0%BF%D1%80%D0%BE%D0%B8%D0%B7%D0%B2%D0%BE%D0%B4%D0%B8%D1%82%D0%B5%D0%BB%D1%8C%D0%BD%D0%BE%D1%81%D1%82%D0%B8-%D0%BD%D0%B8%D0%BA%D0%BE%D0%B3%D0%B4%D0%B0-%D0%BD%D0%B5-%D1%80%D0%B0%D0%BD%D0%BE/</link>
      <pubDate>Sun, 30 Jun 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/%D0%B4%D1%83%D0%BC%D0%B0%D1%82%D1%8C-%D0%BE-%D0%BF%D1%80%D0%BE%D0%B8%D0%B7%D0%B2%D0%BE%D0%B4%D0%B8%D1%82%D0%B5%D0%BB%D1%8C%D0%BD%D0%BE%D1%81%D1%82%D0%B8-%D0%BD%D0%B8%D0%BA%D0%BE%D0%B3%D0%B4%D0%B0-%D0%BD%D0%B5-%D1%80%D0%B0%D0%BD%D0%BE/</guid>
      <description>The needs of users of business applications manifest primarily in functional requirements. Non-functional aspects of the system (such as performance, flexibility, downtime, support needs, etc.) are in the architect’s hands. At the same time, preliminary testing of non-functional requirements is often postponed to a very late stage of the development cycle and sometimes fully delegated to the system maintenance team.&#xA;This mistake is much more common than it should be. It can be based on various reasons.Worrying about the speed and flexibility of the program, which is not yet exactly performing the required function, may seem pointless. Test environments and tests themselves are quite complex.Early working versions of the system may not be exposed to a realistic load due to insufficient intensity of use.</description>
    </item>
  </channel>
</rss>
