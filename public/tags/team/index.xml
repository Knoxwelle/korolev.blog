<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Team on Korolev Blog</title>
    <link>http://localhost:1313/tags/team/</link>
    <description>Recent content in Team on Korolev Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 16 Feb 2025 00:00:00 -0700</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/team/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Try before you decide</title>
      <link>http://localhost:1313/posts/try-before-you-decide/</link>
      <pubDate>Sun, 16 Feb 2025 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/try-before-you-decide/</guid>
      <description>Many choices must be taken during the attachment-forming process. Some may be related to the library or infrastructure selection, while others may be related to the application of particular design patterns.In any event, the architect is often in charge of making the choice. The architect gathers all available data, considers it for a period, and then specifies the guidelines that the developers must follow. The fact that there is an improved method won&amp;rsquo;t surprise you.&#xA;The decision-making process is described by Mary and Tom Poppendieck in their work on lean development. They think that the ultimate choice should wait until the most crucial moment, when the team&amp;rsquo;s inaction will have permanent (or difficult to reverse) repercussions and a decision will be made on its behalf if no decision is made.</description>
    </item>
    <item>
      <title>Do not touch this code</title>
      <link>http://localhost:1313/posts/do-not-touch-this-code/</link>
      <pubDate>Sat, 15 Feb 2025 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/do-not-touch-this-code/</guid>
      <description>Each of us has had something like this happen at some point. Your code has been uploaded to the staging server for system testing, and the department head Testing informs you that there is a problem. You are immediately ready to respond: &amp;ldquo;Let me quickly fix everything: I know what the issue is.&amp;rdquo;&#xA;However, in a broader sense, the problem is that you, as a developer, believe you should be granted access to the server where testing is being conducted.&#xA;In most cases, when it comes to web development, the architecture can be broken down into the following parts:&#xA;-Local development and unit testing on the developer&amp;rsquo;s machine&#xA;Development server where automated or manual integration testing is conducted Staging server, where the quality control team and users conduct acceptance testing Combat (production) server Yes, there are other servers and services, for example, for managing source code or software defects, but the idea is clear.</description>
    </item>
    <item>
      <title>Program in pairs and get into the flow</title>
      <link>http://localhost:1313/posts/program-in-pairs-and-get-into-the-flow/</link>
      <pubDate>Tue, 19 Nov 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/program-in-pairs-and-get-into-the-flow/</guid>
      <description>Imagine that you are completely absorbed in your work: focused, passionate, and busy. You have lost track of time. You are happy. You are in a state of flow. On a larger scale, it is difficult for an entire team of developers to achieve and maintain a state of flow due to numerous interruptions, distractions, and other obstacles that can easily disrupt it.&#xA;If you have already participated in pair programming, you probably know how it contributes to achieving a state of flow. If not, we want to share our experience to encourage you to start pair programming immediately! For pair programming to be successful, some effort is required from individual team members and the entire team as a whole.&#xA;Being part of a team, show patience towards less experienced developers.</description>
    </item>
    <item>
      <title>How to use the bug tracking system</title>
      <link>http://localhost:1313/posts/how-to-use-the-bug-tracking-system/</link>
      <pubDate>Mon, 28 Oct 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/how-to-use-the-bug-tracking-system/</guid>
      <description>No matter what you call them – bugs, defects, or even design side effects – it is impossible to eliminate them completely. For a project to be successful moving forward, it is very important to be able to correctly write an error report, as well as to know what to pay attention to in it.&#xA;In a good bug report, three things should be described: • How to reproduce the error – as accurately as possible – and how often the error manifests itself. • What was supposed to happen – how do you see it? • What is actually happening – at least the data you were able to record.&#xA;The volume and quality of the provided information equally characterize the report&amp;rsquo;s author, as well as the error itself.</description>
    </item>
  </channel>
</rss>
