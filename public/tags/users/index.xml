<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Users on Korolev Blog</title>
    <link>http://localhost:1313/tags/users/</link>
    <description>Recent content in Users on Korolev Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 08 Jul 2025 00:00:00 -0700</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/users/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Prevent the occurrence of errors</title>
      <link>http://localhost:1313/posts/prevent-the-occurrence-of-errors/</link>
      <pubDate>Tue, 08 Jul 2025 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/prevent-the-occurrence-of-errors/</guid>
      <description>Error messages are the most critical form of interaction between the user and the system. They arise when the user&amp;rsquo;s communication with the system is on the verge of breaking down.&#xA;It is easiest to assume that errors occur due to user fault from entering incorrect data. However, the mistakes people make are predictable and happen systematically. Therefore, you can &amp;ldquo;debug&amp;rdquo; the interaction between the user and the system just as you debug the interaction between other components of the system.&#xA;Let&amp;rsquo;s say the user needs to enter a date within a specific range. Instead of allowing them to enter any date, wouldn&amp;rsquo;t it be better to provide a tool like a list or calendar that shows only the permissible dates? This would eliminate any possibility of entering a date outside the allowed range.</description>
    </item>
    <item>
      <title>Two mistakes can cancel each other out, making them difficult to correct</title>
      <link>http://localhost:1313/posts/two-mistakes-can-cancel-each-other-out-making-them-difficult-to-correct/</link>
      <pubDate>Mon, 16 Jun 2025 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/two-mistakes-can-cancel-each-other-out-making-them-difficult-to-correct/</guid>
      <description>Code never lies, but it can be internally contradictory. Sometimes contradictions cause confusion: how can this even work?&#xA;In his interview, Allan Klumpp, the lead software developer for the Apollo lunar module, revealed that the engine control software contained a defect that caused the lunar module to behave erratically. However, there was another bug in the program that compensated for the first one, and during the Apollo 11 and 12 moon landings, this software was successfully used before the bugs were discovered and fixed.&#xA;Let&amp;rsquo;s consider a function that returns an exit code. Let&amp;rsquo;s say it returns false when it should return true. Now imagine that the calling function does not implement the check for the return value. Everything works perfectly until one day someone discovers the lack of a check and adds it.</description>
    </item>
    <item>
      <title>Interfaces</title>
      <link>http://localhost:1313/posts/interfaces/</link>
      <pubDate>Fri, 14 Feb 2025 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/interfaces/</guid>
      <description>One of the most common tasks in software development is interface specification. Interfaces exist at the highest level of abstraction (user interfaces), at the lowest level (function interfaces), and at intermediate levels (class interfaces, libraries, etc.). Regardless of what you are doing—aligning with end users on their future interaction with the system, collaborating with developers to develop the API specification, or declaring private class functions—interface design is an important part of your job. If you handle it well, using your interfaces will be a pure pleasure, and user productivity will increase. If you handle the task poorly, your interfaces will become a source of frustration and errors.&#xA;Good interfaces possess the following properties:&#xA;They are easy to use correctly. Users of a well-designed interface almost always use it correctly because that is the path of least resistance for that interface.</description>
    </item>
    <item>
      <title>The golden rule of API design</title>
      <link>http://localhost:1313/posts/the-golden-rule-of-api-design/</link>
      <pubDate>Mon, 29 Jul 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/the-golden-rule-of-api-design/</guid>
      <description>Designing application programming interfaces (APIs) is difficult, especially in the general case. When developing an API that will have hundreds or thousands of users, you need to consider that over time it will most likely need to be changed, and these changes can disrupt the functioning of the client code. Moreover, you need to consider the potential impact on your API from its users. If the API class calls its own method, it should be remembered that the user is capable of creating a subclass of your class and overriding this method, which can lead to disaster. And you won&amp;rsquo;t be able to change this method because some of your users have given it a different meaning. You become dependent on your users when it comes to choosing the internal implementation.</description>
    </item>
    <item>
      <title>Use quantitative criteria</title>
      <link>http://localhost:1313/posts/use-quantitative-criteria/</link>
      <pubDate>Wed, 17 Jul 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/use-quantitative-criteria/</guid>
      <description>&amp;ldquo;Fast&amp;rdquo; cannot be a requirement. Nor can &amp;ldquo;having a good response time.&amp;rdquo; Or, let&amp;rsquo;s say, &amp;ldquo;scalable.&amp;rdquo; The main reason is the lack of objective criteria for meeting such requirements. But users still need these characteristics. The architect&amp;rsquo;s task is to ensure that the system possesses the necessary qualities and to balance the inevitable contradictions that arise. between them. Without objective criteria, the architect depends on whims the client (&amp;ldquo;No, I can&amp;rsquo;t accept the program – it doesn&amp;rsquo;t work fast enough&amp;rdquo;) and the developers, obsessed with their compulsions (&amp;ldquo;No, the program isn&amp;rsquo;t ready yet – it doesn&amp;rsquo;t work fast enough&amp;rdquo;).&#xA;Usually, we try to record all such requests, just like any other requirements. But this record often looks like a set of vague epithets: &amp;ldquo;flexible,&amp;rdquo; &amp;ldquo;easy to accompany,&amp;rdquo; and so on.</description>
    </item>
  </channel>
</rss>
