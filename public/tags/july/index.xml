<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>July on Korolev Blog</title>
    <link>http://localhost:1313/tags/july/</link>
    <description>Recent content in July on Korolev Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 01 Feb 2025 00:00:00 -0700</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/july/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Prevent the occurrence of errors</title>
      <link>http://localhost:1313/posts/prevent-the-occurrence-of-errors/</link>
      <pubDate>Sat, 01 Feb 2025 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/prevent-the-occurrence-of-errors/</guid>
      <description>Error messages are the most critical form of interaction between the user and the system. They arise when the user&amp;rsquo;s communication with the system is on the verge of breaking down.&#xA;It is easiest to assume that errors occur due to user fault from entering incorrect data. However, the mistakes people make are predictable and happen systematically. Therefore, you can &amp;ldquo;debug&amp;rdquo; the interaction between the user and the system just as you debug the interaction between other components of the system.&#xA;Let&amp;rsquo;s say the user needs to enter a date within a specific range. Instead of allowing them to enter any date, wouldn&amp;rsquo;t it be better to provide a tool like a list or calendar that shows only the permissible dates? This would eliminate any possibility of entering a date outside the allowed range.</description>
    </item>
    <item>
      <title>Enterprise interview</title>
      <link>http://localhost:1313/posts/enterprise-interview/</link>
      <pubDate>Sun, 01 Dec 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/enterprise-interview/</guid>
      <description>I would want to share some insights from my recent return to interviewing. This episode covers employment process design and screening in large organizations.&#xA;Examining Tech-screening then takes off like wildfire. The recruiter checks in with Sparkling and asks a ton of questions during the first call. As an example:&#xA;-How is it possible to halt the container? The original data types in Python? What is the PID of the Linux kernel? How are PACELC and CAP understood?&#xA;-&amp;hellip; Some even go so far as to use tiny executable pieces of code to create an entire platform. Twenty queries in twenty minutes. &amp;ldquo;How do I send a message to the generator?&amp;rdquo; Or even &amp;ldquo;What does this code do?&amp;rdquo; He knows that the code is so strange that I wouldn&amp;rsquo;t just ignore it in a review.</description>
    </item>
  </channel>
</rss>
