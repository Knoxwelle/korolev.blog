<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Solutions on Korolev Blog</title>
    <link>http://localhost:1313/tags/solutions/</link>
    <description>Recent content in Solutions on Korolev Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 18 Sep 2024 00:00:00 -0700</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/solutions/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Durability of temporary solutions</title>
      <link>http://localhost:1313/posts/durability-of-temporary-solutions/</link>
      <pubDate>Wed, 18 Sep 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/durability-of-temporary-solutions/</guid>
      <description>Why do we create temporary solutions?&#xA;Usually, the culprit is an urgent task. Sometimes, it&amp;rsquo;s an internal task for developersâ€”to create a missing tool for the development chain. Other times, the task is external, user-oriented, such as a workaround to compensate for missing functionality.&#xA;In most systems and teams, you can find a module that somehow stands out in the system. It is considered a draft version, and it will need to be redone later because it does not meet the standards and rules that the rest of the code lives by. You will definitely have to hear developers&amp;rsquo; complaints about this. The reasons for the appearance of such code can vary, but the main reason for the emergence of intermediate solutions is their usefulness.</description>
    </item>
    <item>
      <title>Time changes everything</title>
      <link>http://localhost:1313/posts/time-changes-everything/</link>
      <pubDate>Sat, 03 Aug 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/time-changes-everything/</guid>
      <description>Seeing what has survived and what hasn&amp;rsquo;t has long been one of my favorite vivid forms of amusement. There were a plethora of patterns, infrastructures, paradigm shifts, and algorithms. Wise people debated them fervently, considered long-term views, and attempted to strike a balance between all the known components, but in the end, they came to naught. Why? What is the past attempting to teach us?&#xA;Pick a noble assignment For a software architect, this is highly challenging. We receive assignments and issues from the client, so we really don&amp;rsquo;t have a choice, do we? It&amp;rsquo;s not really that easy. First of all, we frequently make the error of thinking that we have little power over what the customer desires. But it&amp;rsquo;s typically possible to just step outside of your comfort zone when it comes to technology.</description>
    </item>
  </channel>
</rss>
