<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Solutions on Tiny Dev Blog</title>
    <link>http://localhost:1313/tags/solutions/</link>
    <description>Recent content in Solutions on Tiny Dev Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 04 Aug 2024 00:00:00 -0700</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/solutions/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Reduce the intrinsic complexity and eliminate the incidental complexity</title>
      <link>http://localhost:1313/posts/reduce-the-intrinsic-complexity-and-eliminate-the-incidental-complexity/</link>
      <pubDate>Sun, 04 Aug 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/reduce-the-intrinsic-complexity-and-eliminate-the-incidental-complexity/</guid>
      <description>For instance, it takes a lot of work to coordinate air traffic at the national level. To avoid collisions in the air and on the runways, the control system must continuously monitor each aircraft&amp;rsquo;s exact location, including height, speed, direction, and destination. Additionally, it&amp;rsquo;s critical to swiftly manage aircraft schedules in order to prevent traffic jams at airports under continuously changing conditions. A drastic change in the weather necessitates a complete revision of the timetable.&#xA;Conversely, problems that we believe must be resolved in order to lessen the inherent complexity are the source of unintended complexity. A modest example of complexity is the flight management system, which is now out of date and yet in use.The system was created to handle the difficult task of coordinating the flight of thousands of aircraft; however, this solution has drawbacks of its own.</description>
    </item>
    <item>
      <title>Simplicity is better than versatility</title>
      <link>http://localhost:1313/posts/simplicity-is-better-than-versatility/</link>
      <pubDate>Mon, 20 May 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/simplicity-is-better-than-versatility/</guid>
      <description>The fact that many frameworks, class libraries, basic services, and other infrastructure code are made to be used universally and aren&amp;rsquo;t tied to any particular application is a common issue with them. The majority of developers specialize in particular systems; therefore, trying to be as versatile as possible is rarely beneficial to them. The greatest approach to reaching universality is not by universality based on supposition but rather by a thorough comprehension of known concrete cases and a study of their essence to uncover a fundamental common solution. Simplicity is the outcome of practical experience.&#xA;Simplifying an architectural design over adding more features makes it easier to choose between two options that are equivalent in every other way. Choose a more straightforward and needs-based solution over a more complex and adaptable one when there are two options.</description>
    </item>
  </channel>
</rss>
