<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Project on Tiny Dev Blog</title>
    <link>http://localhost:1313/tags/project/</link>
    <description>Recent content in Project on Tiny Dev Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 11 Jul 2024 00:00:00 -0700</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/project/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Never prioritize your resume over the needs of the client</title>
      <link>http://localhost:1313/posts/never-prioritize-your-resume-over-the-needs-of-the-client/</link>
      <pubDate>Thu, 11 Jul 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/never-prioritize-your-resume-over-the-needs-of-the-client/</guid>
      <description>As technicians, we select specific technologies, tactics, and methods to address issues not because they offer the best solution but rather because we sincerely want to include them in our synopsis. Making such a decision almost never has favorable outcomes.&#xA;Because you have done so successfully for them, your grateful clients who are waiting in line to refer you to others will be the most potent career catalyst. You will get better service from the kind clients than from any newly created paradigm or trendy object in the new language. Even though staying current with emerging ideas and technology is crucial for architects, you should never try to take on more work at the client&amp;rsquo;s expense. As architects, you should never forget that you are responsible for the success of your organization.</description>
    </item>
    <item>
      <title>The architect must be a practitioner</title>
      <link>http://localhost:1313/posts/the-architect-must-be-a-practitioner/</link>
      <pubDate>Fri, 28 Jun 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/the-architect-must-be-a-practitioner/</guid>
      <description>A competent architect ought to lead by example. He should be able to take the position of any team member and handle any task, including creating modular tests, conducting performance tests, and setting up networking and the assembly process. In the absence of a thorough comprehension of all available technologies, an architect is really no different from a regular project manager.Although it is rather typical for team members to be more knowledgeable in their specialized professions, they are unlikely to be able to trust their architect unless he is conversant with the technology being employed.Since an architect serves as a liaison between the technical team and the company, as has already been mentioned, he must be well-versed in all technical facets in order to represent the team to the business management without continuously seeking assistance.</description>
    </item>
    <item>
      <title>Communication is the king, clarity and leadership are his true companions</title>
      <link>http://localhost:1313/posts/communication-is-the-king-clarity-and-leadership-are-his-true-companions/</link>
      <pubDate>Tue, 18 Jun 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/communication-is-the-king-clarity-and-leadership-are-his-true-companions/</guid>
      <description>All too frequently, software architects reside in ivory towers, dictating technologies and instructions to developers while leaving them with little to no guidance. Simultaneously, this causes conflict, which is soon followed by a &amp;ldquo;popular uprising.&amp;rdquo; The end product is a piece of software that bears no relation to the original specifications. It is imperative for any software architect to be able to articulate to his peers the aims and purposes of the software project. Effective communication relies on leadership and clarity.&#xA;A communication procedure that is clear and concise. A one hundred-page document explaining your architectural choices will not be read by anyone in your group. Effective communication of ideas is essential for any program or effort to succeed. When starting work on the project, stick to brief explanations and don&amp;rsquo;t start writing lengthy word descriptions.</description>
    </item>
    <item>
      <title>One line of working code costs 500 lines of specification</title>
      <link>http://localhost:1313/posts/one-line-of-working-code-costs-500-lines-of-specification/</link>
      <pubDate>Mon, 03 Jun 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/one-line-of-working-code-costs-500-lines-of-specification/</guid>
      <description>It is lovely to promethize. In this regard, specifications are crucial since they establish the framework for system construction. It is crucial to consider the architecture as a whole, taking into account the behavior of individual components as well as the interactions between them on a micro and macro scale.&#xA;Regrettably, architects are frequently enthralled with the design process and are drawn to architectural abstractions. But the specs are worthless in and of themselves. A truly functional system is the software project&amp;rsquo;s ultimate goal. This objective should constantly remain in the architect&amp;rsquo;s mind, and they should never forget that design is merely a tool, not the final product. The skyscraper&amp;rsquo;s architect would soon come to regret disobeying the rules of physics in favor of the building&amp;rsquo;s elegance.</description>
    </item>
    <item>
      <title>Try not to break the schedule</title>
      <link>http://localhost:1313/posts/try-not-to-break-the-schedule/</link>
      <pubDate>Fri, 31 May 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/try-not-to-break-the-schedule/</guid>
      <description>Numerous factors can cause a software project to fail. Changing the work schedule mid-project without enough planning is one of the most frequent causes of project failure. These kinds of failures are preventable, but it will take a lot of work from many individuals. Adding resources or modifying the timeline to a project typically doesn&amp;rsquo;t cause any issues. When you have to work more in the same amount of time or reduce the timetable without lowering the workload, problems arise.&#xA;A very prevalent fallacy is that you can cut expenses or expedite product delivery by shortening the timeline. Usually, extra hours are worked or &amp;ldquo;less important tasks&amp;rdquo; (such modular testing) are given up for quicker product delivery or for better functionality without affecting delivery time.</description>
    </item>
    <item>
      <title>Perhaps your main problem is not technology</title>
      <link>http://localhost:1313/posts/perhaps-your-main-problem-is-not-technology/</link>
      <pubDate>Wed, 22 May 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/perhaps-your-main-problem-is-not-technology/</guid>
      <description>Somewhere right now, a different wage calculation project is failing miserably&amp;hellip; and most likely not by yourself.&#xA;What caused that to occur? because the developers opted for Ruby over Smalltalk or Java or Python? since you choose to utilize Postgres over Oracle? or because you preferred the Windows platform even if you should have chosen Linux? As you are aware, technology is frequently held responsible for project failures.&#xA;People normally establish projects, and it is up to these individuals to decide whether the project as a whole succeeds or fails. And once that is the case, we ought to consider our options for assisting them in being successful.&#xA;Per, you believe that there is a team member that is underperforming and impeding the project&amp;rsquo;s progress.</description>
    </item>
    <item>
      <title>Ensure continuous integration</title>
      <link>http://localhost:1313/posts/ensure-continuous-integration/</link>
      <pubDate>Sat, 11 May 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/ensure-continuous-integration/</guid>
      <description>The collection no longer serves as the project&amp;rsquo;s &amp;ldquo;Big Bang&amp;rdquo; in terms of design. In every project, architects should promote the use of continuous integration techniques and technologies, both at the corporate and application levels.&#xA;Martin Fowler originally suggested the term continuous integration (CI) as a design template. It refers to a collection of techniques and equipment that guarantees consistent, automated application testing and assembly across brief intervals of time (sometimes on an integration server specifically created to carry out these tasks). Continuous integration, which combines automated assembly tools with modular testing techniques and tools, is now required for all modern software projects.&#xA;The project&amp;rsquo;s components are now assembled and put to the test. These days, continuous integration has taken the position of &amp;ldquo;early and frequent assembly.</description>
    </item>
  </channel>
</rss>
