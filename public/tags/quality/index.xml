<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Quality on Tiny Dev Blog</title>
    <link>http://localhost:1313/tags/quality/</link>
    <description>Recent content in Quality on Tiny Dev Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 31 May 2024 00:00:00 -0700</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/quality/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Try not to break the schedule</title>
      <link>http://localhost:1313/posts/try-not-to-break-the-schedule/</link>
      <pubDate>Fri, 31 May 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/try-not-to-break-the-schedule/</guid>
      <description>Numerous factors can cause a software project to fail. Changing the work schedule mid-project without enough planning is one of the most frequent causes of project failure. These kinds of failures are preventable, but it will take a lot of work from many individuals. Adding resources or modifying the timeline to a project typically doesn&amp;rsquo;t cause any issues. When you have to work more in the same amount of time or reduce the timetable without lowering the workload, problems arise.&#xA;A very prevalent fallacy is that you can cut expenses or expedite product delivery by shortening the timeline. Usually, extra hours are worked or &amp;ldquo;less important tasks&amp;rdquo; (such modular testing) are given up for quicker product delivery or for better functionality without affecting delivery time.</description>
    </item>
  </channel>
</rss>
