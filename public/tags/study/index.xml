<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Study on Korolev Blog</title>
    <link>http://localhost:1313/tags/study/</link>
    <description>Recent content in Study on Korolev Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 05 Dec 2024 00:00:00 -0700</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/study/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Take responsibility for your build and its refactoring</title>
      <link>http://localhost:1313/posts/take-responsibility-for-your-build-and-its-refactoring/</link>
      <pubDate>Thu, 05 Dec 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/take-responsibility-for-your-build-and-its-refactoring/</guid>
      <description>It is not so rare for teams, which generally discipline themselves to follow good coding practices, to treat build scripts with disdain. They are considered either insignificant or so complex that only a sect of release engineers can maintain them. If build scripts are difficult to maintain, contain duplication and errors, it leads to problems of the same scale as poorly designed code.&#xA;Why do responsible and competent developers consider project assembly to be a somewhat secondary task? One explanation is that assembly scripts are often written in a different language than the source code. Another is that assembly scripts are not considered &amp;ldquo;code.&amp;rdquo; Such explanations are contradictory, as most developers are eager to learn new languages, and it is the assembly process that produces executable modules which developers and end users will test and run.</description>
    </item>
    <item>
      <title>Warning - Common code ownership</title>
      <link>http://localhost:1313/posts/warning---common-code-ownership/</link>
      <pubDate>Thu, 30 May 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/warning---common-code-ownership/</guid>
      <description>My first project in the company. I just defended my thesis, and I&amp;rsquo;m eager to prove myself, so I stay late at work and thoroughly study the existing code. Working on my first task, I apply everything I&amp;rsquo;ve been taught: comments, event logs, extracting common code into libraries (where possible), all that stuff. I feel completely ready for code review, but my colleagues seem to pour cold water on me: I get criticized for code reuse!&#xA;How so? During my university studies, code reuse was hailed as one of the best practices in software development. All the articles and textbooks I read, guided by experienced professional programmersâ€”were they all wrong?&#xA;It turns out, I overlooked something very important. Context.&#xA;The fact that two directly unrelated parts of the system use the same logic means less than I thought.</description>
    </item>
  </channel>
</rss>
