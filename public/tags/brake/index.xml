<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Brake on Korolev Blog</title>
    <link>http://localhost:1313/tags/brake/</link>
    <description>Recent content in Brake on Korolev Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 27 Jul 2024 00:00:00 -0700</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/brake/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Comment only on what the code will not say</title>
      <link>http://localhost:1313/posts/comment-only-on-what-the-code-will-not-say/</link>
      <pubDate>Sat, 27 Jul 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/comment-only-on-what-the-code-will-not-say/</guid>
      <description>The discrepancy between theory and practice is greater in practice than in theory. This observation definitely applies to comments. In theory, the general idea of commenting code seems commendable: to give colleagues a detailed explanation of what is happening. What could be more useful than providing useful information? But in practice, comments often do more harm than good. Like any form of writing, writing comments requires skill. This skill largely involves understanding when not to write comments.&#xA;If the code is written with syntax errors, compilers, interpreters, and other development tools will definitely object. If the code is functionally incorrect, most of the errors will be identified through review, static analysis, testing, and real-world deployment in a commercial enterprise. And what about comments? In the book &amp;ldquo;The Elements of Programming Style&amp;rdquo; (Computing McGraw-Hill), Kernighan and Plauger note that &amp;ldquo;a wrong comment is worse than no comment at all.</description>
    </item>
    <item>
      <title>Comment only on what the code not say</title>
      <link>http://localhost:1313/posts/comment-only-on-what-the-code-not-say/</link>
      <pubDate>Wed, 10 Jul 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/comment-only-on-what-the-code-not-say/</guid>
      <description>The discrepancy between theory and practice is greater in practice than in theory. This observation definitely applies to comments. In theory, the general idea of commenting code looks commendable: to give colleagues a detailed explanation of what is happening. What could be more useful than providing useful information? But in practice, comments often do more harm than good. Like any form of writing, writing comments requires skill. This skill largely involves understanding when not to write comments.&#xA;If the code is written with syntax errors, compilers, interpreters, and other development tools will definitely object. If the code is functionally incorrect, most of the errors will be identified through review, static analysis, testing, and real-world deployment in a commercial enterprise. And what about comments? In the book &amp;ldquo;The Elements of Programming Style&amp;rdquo; (Computing McGraw-Hill), Kernighan and Plauger note that &amp;ldquo;a wrong comment has zero or negative value.</description>
    </item>
  </channel>
</rss>
