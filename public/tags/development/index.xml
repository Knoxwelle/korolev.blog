<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Development on Korolev Blog</title>
    <link>http://localhost:1313/tags/development/</link>
    <description>Recent content in Development on Korolev Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 08 Apr 2025 00:00:00 -0700</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/development/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Beauty is the result of simplicity</title>
      <link>http://localhost:1313/posts/beauty-is-the-result-of-simplicity/</link>
      <pubDate>Tue, 08 Apr 2025 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/beauty-is-the-result-of-simplicity/</guid>
      <description>Plato has one saying that, it seems to me, would be especially useful for all software developers to know and take to heart:&#xA;The beauty of style, harmony, elegance, and good rhythm are based on simplicity.&#xA;This single sentence embodies the values that we, as developers, should admire.&#xA;There are a number of things we aim to achieve in our code:&#xA;Readability - Ease of maintenance - Development speed - Elusive beauty Plato tells us that all these qualities are possible only thanks to simplicity.&#xA;What is beautiful code? This is probably a very subjective question. The perception of beauty is heavily dependent on personal experience, just as our perception of anything else is. Those who have studied art perceive beauty differently (at least approach it differently) than those with a technical education.</description>
    </item>
    <item>
      <title>Creating architecture as the art of balance</title>
      <link>http://localhost:1313/posts/creating-architecture-as-the-art-of-balance/</link>
      <pubDate>Wed, 05 Mar 2025 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/creating-architecture-as-the-art-of-balance/</guid>
      <description>Match the interests of the parties with the technical requirements. When it comes to software architecture development, First and foremost, we envision classic technical operations: breaking the system into modules, defining interfaces, distributing responsibilities, applying templates, and optimizing performance. In addition, the architect must consider a number of other aspects, including issues of security, ease of use, maintainability, release management, deployment parameter selection, etc. But all the listed technical and procedural aspects must be aligned with the needs of stakeholders. Taking these interests into account when analyzing requirements is an excellent way to ensure the completeness of the specifications for the requirements of the product being developed.&#xA;All parties involved in the project have interests that affect both the software development process adopted in the organization and the organization as a whole.</description>
    </item>
    <item>
      <title>Do not touch this code</title>
      <link>http://localhost:1313/posts/do-not-touch-this-code/</link>
      <pubDate>Sat, 21 Dec 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/do-not-touch-this-code/</guid>
      <description>Each of us has had something like this happen at some point. Your code has been uploaded to the staging server for system testing, and the department head Testing informs you that there is a problem. You are immediately ready to respond: &amp;ldquo;Let me quickly fix everything: I know what the issue is.&amp;rdquo;&#xA;However, in a broader sense, the problem is that you, as a developer, believe you should be granted access to the server where testing is being conducted.&#xA;In most cases, when it comes to web development, the architecture can be broken down into the following parts:&#xA;-Local development and unit testing on the developer&amp;rsquo;s machine&#xA;Development server where automated or manual integration testing is conducted Staging server, where the quality control team and users conduct acceptance testing Combat (production) server Yes, there are other servers and services, for example, for managing source code or software defects, but the idea is clear.</description>
    </item>
    <item>
      <title>Continuous learning</title>
      <link>http://localhost:1313/posts/continuous-learning/</link>
      <pubDate>Thu, 12 Sep 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/continuous-learning/</guid>
      <description>We live in interesting times. Development is distributed all over the world, and it turns out that many people are capable of doing your job. To remain competitive in the labor market, you need to continuously learn. Otherwise, you will turn into a dinosaur stuck in your job until one fine day it turns out that you are no longer needed, or that your job has been given to someone who is willing to do it for less.&#xA;How to solve this problem? Some employers are generous and organize training to develop already hired programmers. Others simply cannot afford to allocate time or resources for this. The most reliable solution is to take care of your own education.&#xA;Here is a list of ways to continue learning.</description>
    </item>
  </channel>
</rss>
