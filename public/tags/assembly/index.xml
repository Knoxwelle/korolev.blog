<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Assembly on Korolev Blog</title>
    <link>http://localhost:1313/tags/assembly/</link>
    <description>Recent content in Assembly on Korolev Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 05 Dec 2024 00:00:00 -0700</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/assembly/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Take responsibility for your build and its refactoring</title>
      <link>http://localhost:1313/posts/take-responsibility-for-your-build-and-its-refactoring/</link>
      <pubDate>Thu, 05 Dec 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/take-responsibility-for-your-build-and-its-refactoring/</guid>
      <description>It is not so rare for teams, which generally discipline themselves to follow good coding practices, to treat build scripts with disdain. They are considered either insignificant or so complex that only a sect of release engineers can maintain them. If build scripts are difficult to maintain, contain duplication and errors, it leads to problems of the same scale as poorly designed code.&#xA;Why do responsible and competent developers consider project assembly to be a somewhat secondary task? One explanation is that assembly scripts are often written in a different language than the source code. Another is that assembly scripts are not considered &amp;ldquo;code.&amp;rdquo; Such explanations are contradictory, as most developers are eager to learn new languages, and it is the assembly process that produces executable modules which developers and end users will test and run.</description>
    </item>
  </channel>
</rss>
