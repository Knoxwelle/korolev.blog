+++
title='Комментируйте только то, о чем не скажет код'
date=2024-07-10T00:00:00-07:00
draft=true
categories=[]
tags=[]
cover_image='/images/cover/knoxwelle__2021-08-08T051054.000Z.jpg'
+++

Рас­хо­ж­де­ние меж­ду тео­ри­ей и прак­ти­кой на практике больше, чем в теории. Это 
наблюдение определенно применимо к комментариям. В теории общая идея комментирования кода выглядит достойно: дать коллегам детальное объяснение 
происходящего. Что может быть полезнее, чем давать полезное? А вот на практике комментарии часто вредят. Как и любой вид писательского творчества, написание комментариев требует мастерства. Это мастерство в значительной мере 
включает в себя понимание того, когда комментарии писать не нужно.

Если код написан с нарушениями синтаксиса, то компиляторы, интерпретаторы 
и другие средства разработки обязательно воспротивятся. Если код некорректен 
с функциональной точки зрения, большая часть ошибок выявится в результате 
рецензирования, статического анализа, тестирования и боевого применения на 
коммерческом предприятии. А что с комментариями? В книге «The Elements of 
Programming Style» (Computing McGraw-Hill) Керниган и Плоджер замечают, 
что «неверный комментарий имеет нулевое или отрицательное значение». И все 
же такие негодные комментарии успешно приживаются в коде на зависть ошибкам всех видов. Они постоянно отвлекают внимание и дезинформируют. Они 
служат незаметным, но постоянно действующим тормозом мышления программиста.

Что можно сказать о комментариях, которые формально не являются ошибочными, но не повышают ценности кода? Такие комментарии – просто шум. Иногда комментарии лишь повторяют уже сказанное в коде на естественном языке, 
то есть попугайничают, не сообщая читателю ничего нового; такое повторение не 
придает коду ни веса, ни правильности. Закомментированный код не выполняется, поэтому он бесполезен как при чтении кода, так и при его выполнении. 
Кроме того, он очень быстро устаревает. Комментарии относительно номеров версий и блоки закомментированного кода – это попытки решить вопросы контроля версий и истории кода. Такие вопросы решаются (и гораздо эффективнее) с помощью систем управления версиями.

Засилье в коде бессодержательных и неправильных комментариев провоцирует 
программистов попросту игнорировать все комментарии, пропуская их при чтении либо выключая их отображение. Программисты – люди изобретательные, 
и найдут способы обойти все, что покажется им вредоносным: свернут комментарии, изменят цветовую схему так, чтобы комментарии были одного цвета с фоном, или удалят комментарии специально написанным сценарием. Чтобы спасти код от такого неуместного приложения творческих способностей программистов и чтобы снизить риск того, что кто-то пропустит действительно ценные 
комментарии, следует считать комментарии частью кода. Каждый комментарий 
должен иметь какую-то ценность для читателя, иначе это просто мусор, который нужно убрать или переработать.

Какой же комментарий можно считать ценным? Только такой комментарий, который сообщает то, чего не говорит и не может сказать код. Если комментарий 
лишь разъясняет то, что должен самостоятельно сказать фрагмент кода, это указывает на необходимость изменить структуру кода или принятые соглашения по 
написанию кода, чтобы код говорил за себя сам. Чем комментировать недостаточно точные имена методов и классов, лучше их переименовать. Чем комментировать блоки в длинных функциях, выделите их в маленькие самостоятельные 
функции, названия которых будут отражать назначения этих блоков. Старайтесь сообщать максимум информации посредством кода. Если вы не можете описать все, что хотелось бы, с помощью одного лишь кода, возможно, тут будет уместен комментарий. Комментируйте то, что не способен сказать код, а не просто 
то, чего код не говорит.