<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Tiny Dev Blog</title>
    <link>http://localhost:1313/posts/</link>
    <description>Recent content in Posts on Tiny Dev Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 12 Aug 2024 00:00:00 -0700</lastBuildDate>
    <atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Создание архитектуры как искусство баланса</title>
      <link>http://localhost:1313/posts/%D1%81%D0%BE%D0%B7%D0%B4%D0%B0%D0%BD%D0%B8%D0%B5-%D0%B0%D1%80%D1%85%D0%B8%D1%82%D0%B5%D0%BA%D1%82%D1%83%D1%80%D1%8B-%D0%BA%D0%B0%D0%BA-%D0%B8%D1%81%D0%BA%D1%83%D1%81%D1%81%D1%82%D0%B2%D0%BE-%D0%B1%D0%B0%D0%BB%D0%B0%D0%BD%D1%81%D0%B0/</link>
      <pubDate>Mon, 12 Aug 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/%D1%81%D0%BE%D0%B7%D0%B4%D0%B0%D0%BD%D0%B8%D0%B5-%D0%B0%D1%80%D1%85%D0%B8%D1%82%D0%B5%D0%BA%D1%82%D1%83%D1%80%D1%8B-%D0%BA%D0%B0%D0%BA-%D0%B8%D1%81%D0%BA%D1%83%D1%81%D1%81%D1%82%D0%B2%D0%BE-%D0%B1%D0%B0%D0%BB%D0%B0%D0%BD%D1%81%D0%B0/</guid>
      <description>When it comes to developing a software architecture, we first imagine the classic technical operations: system breakdown into modules, defining interfaces, allocating responsibilities, applying templates, and optimizing performance.In addition, the architect must take into account a number of other aspects, including safety, ease of use, easy maintenance, output management, choice of deployment settings, etc.However, all of these technical and procedural aspects must be relevant to the needs of the stakeholders.Taking these interests into account in the analysis of requirements is a great way to ensure that the requirements specifications for the product being developed are complete.&#xA;All parties involved in the project have interests affecting both the software development process adopted in the organization and the organization as a whole. It is the analysis of these interests that forms the resulting set of priorities for the architect.</description>
    </item>
    <item>
      <title>DevOps, SRE</title>
      <link>http://localhost:1313/posts/devops-sre/</link>
      <pubDate>Sun, 11 Aug 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/devops-sre/</guid>
      <description>I&amp;rsquo;ve been going to interviews again, and I&amp;rsquo;d like to share some observations. This time we are talking about DevOps and SRE in enterprise companies and their recruitment processes.&#xA;DevOps/SRE I was unemployed and full of time, so I decided to interview DevOps. In vain that the course on Linux was held on Udemy (a joke, sarcasm, still passed, but to write about it is embarrassing)?! And then I liked the process much more. It consisted of only two steps: general knowledge and troubleshooting.&#xA;In general, the interviewer had a list of questions, but he allowed himself to deviate a little from it, which gave some liveliness to the conversation. We&amp;rsquo;ve had time to discuss Linux loading, networking, container operation, and databases. In general, what happens in the universe one way or another?</description>
    </item>
    <item>
      <title>Сделать наспех и сбежать это преступление</title>
      <link>http://localhost:1313/posts/%D1%81%D0%B4%D0%B5%D0%BB%D0%B0%D1%82%D1%8C-%D0%BD%D0%B0%D1%81%D0%BF%D0%B5%D1%85-%D0%B8-%D1%81%D0%B1%D0%B5%D0%B6%D0%B0%D1%82%D1%8C-%D1%8D%D1%82%D0%BE-%D0%BF%D1%80%D0%B5%D1%81%D1%82%D1%83%D0%BF%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5/</link>
      <pubDate>Sun, 11 Aug 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/%D1%81%D0%B4%D0%B5%D0%BB%D0%B0%D1%82%D1%8C-%D0%BD%D0%B0%D1%81%D0%BF%D0%B5%D1%85-%D0%B8-%D1%81%D0%B1%D0%B5%D0%B6%D0%B0%D1%82%D1%8C-%D1%8D%D1%82%D0%BE-%D0%BF%D1%80%D0%B5%D1%81%D1%82%D1%83%D0%BF%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5/</guid>
      <description>Time is approaching evening.The command is friendly about the new functionality scheduled for the current iteration; it seems that even the air in the room is pulsing at a working pace.However, John is a little in a hurry: he is waiting for a date.However, he has time to rewrite his part of the code, compiles it, registers in the source code management system – and rushes away.A few minutes later, the &amp;ldquo;red light&amp;rdquo; is lit: the assembly of the app is disrupted.John didn&amp;rsquo;t have time for automated tests, so he acted on the rush and run principle, causing the entire team to stall.&#xA;The situation has changed – the working rhythm has failed. Now everyone knows that when you update the code from the version control system, the code will not work on their local computers, and because the team will have to integrate a lot of code to prepare for the upcoming demonstration, this becomes a serious obstacle.</description>
    </item>
    <item>
      <title>Сбои неизбежны</title>
      <link>http://localhost:1313/posts/%D1%81%D0%B1%D0%BE%D0%B8-%D0%BD%D0%B5%D0%B8%D0%B7%D0%B1%D0%B5%D0%B6%D0%BD%D1%8B/</link>
      <pubDate>Wed, 07 Aug 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/%D1%81%D0%B1%D0%BE%D0%B8-%D0%BD%D0%B5%D0%B8%D0%B7%D0%B1%D0%B5%D0%B6%D0%BD%D1%8B/</guid>
      <description>Equipment is vulnerable to damage, so we&amp;rsquo;re introducing excess in our systems.It allows you to survive individual hardware failures, but increases the likelihood that at any time at least one malfunction will be present in the system.&#xA;The software code is also vulnerable. Our applications are based on software code, which means they are vulnerable too.We implement monitoring tools that report application failures, but these tools are also based on software code, which means that they are vulnerable to failure themselves.&#xA;So people make mistakes, so we try to automate our actions, diagnostics and workflows.Automation reduces the likelihood of errors caused by breaches of rules, but increases the likeliness of mistakes resulting from lack of rules.No automated system is capable of responding to such a range of situations as a human being.</description>
    </item>
    <item>
      <title>Reduce the intrinsic complexity and eliminate the incidental complexity</title>
      <link>http://localhost:1313/posts/reduce-the-intrinsic-complexity-and-eliminate-the-incidental-complexity/</link>
      <pubDate>Sun, 04 Aug 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/reduce-the-intrinsic-complexity-and-eliminate-the-incidental-complexity/</guid>
      <description>Essential complexity is a problem inherent in any task. For example, the task of coordinating air traffic at the national level is complex in itself. The control system must monitor in real time the precise location of each aircraft (including altitude), its speed, direction and destination, in order to prevent collisions in the air and on the runways. It is also necessary to manage flight schedules promptly to avoid congestion at airports in constantly changing conditions – when the weather changes sharply the entire schedule has to be revised.&#xA;On the other hand, accidental complexity is caused by challenges that we think need to be solved in order to reduce the inherent complexity. An example of a minor complexity is the outdated flight management system still in use.</description>
    </item>
    <item>
      <title>Вы ведете переговоры чаще, чем вам кажется</title>
      <link>http://localhost:1313/posts/%D0%B2%D1%8B-%D0%B2%D0%B5%D0%B4%D0%B5%D1%82%D0%B5-%D0%BF%D0%B5%D1%80%D0%B5%D0%B3%D0%BE%D0%B2%D0%BE%D1%80%D1%8B-%D1%87%D0%B0%D1%89%D0%B5-%D1%87%D0%B5%D0%BC-%D0%B2%D0%B0%D0%BC-%D0%BA%D0%B0%D0%B6%D0%B5%D1%82%D1%81%D1%8F/</link>
      <pubDate>Tue, 30 Jul 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/%D0%B2%D1%8B-%D0%B2%D0%B5%D0%B4%D0%B5%D1%82%D0%B5-%D0%BF%D0%B5%D1%80%D0%B5%D0%B3%D0%BE%D0%B2%D0%BE%D1%80%D1%8B-%D1%87%D0%B0%D1%89%D0%B5-%D1%87%D0%B5%D0%BC-%D0%B2%D0%B0%D0%BC-%D0%BA%D0%B0%D0%B6%D0%B5%D1%82%D1%81%D1%8F/</guid>
      <description>We have all fallen into “budget” refinements, when smart technological solutions are “buried” for savings.The conversation goes like this:&#xA;“Do we really need X?” the project sponsor asks.&#xA;In place of X you can replace virtually everything vital to the system: software licenses, surplus servers, external backups or power sources. The question is always asked in a native tone, as if you are dropping all your pocket money on comics and chewing, while serious adults need to think about buying new shells, in which they will drag their future profits.&#xA;The correct answer to this question is, &amp;ldquo;Yes. Absolutely necessary.&amp;rdquo; But for some reason, almost no one answers.&#xA;After all, we have technical education, and any technical discipline is the art of compromise.It is clear that no one will need exotic power sources if you put several white wheels in the data center and start interns in them.</description>
    </item>
    <item>
      <title>Knowledge test</title>
      <link>http://localhost:1313/posts/knowledge-test/</link>
      <pubDate>Wed, 24 Jul 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/knowledge-test/</guid>
      <description>I&amp;rsquo;ve been going to interviews again, and I&amp;rsquo;d like to share some observations. This time it is about testing knowledge in enterprise companies and how the recruitment process should be constructed.&#xA;Knowledge test So, I talked about five stages of IT interviews. You probably thought I exaggerated. But no: recruiter, Python test, live coding, system design, soft skills. Then another call for the offer presentation. So, the second stage is just some kind of Facebook spam. Not only can it be combined with live coding if it is not just to code but to discuss the solution, but also the questions on it, softly speaking, are stupid. Primitive and old-fashioned. So, according to the company&amp;rsquo;s logic, you can send soaps there, so you don&amp;rsquo;t waste your gentlemen&amp;rsquo;s time.</description>
    </item>
    <item>
      <title>System Design</title>
      <link>http://localhost:1313/posts/system-design/</link>
      <pubDate>Tue, 16 Jul 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/system-design/</guid>
      <description>I&amp;rsquo;ve been going to interviews again, and I&amp;rsquo;d like to share some observations. This time we talk about system design enterprise companies and how the recruitment process should be constructed.&#xA;System Design In senior grades, another type of interview appears—system design. In one hour you have to design systems, thinking about the architecture of which in a real project you would spend several weeks. IDEF0, UseCase, ER, C4, DFD, BPMN—forget these scary words; there&amp;rsquo;s no time for them. Figac-figac and Proudakshen. Requirements collection -&amp;gt; usage options -&amp;gt; system requirements -&amp;gt; processing -&amp;gt; presentation of the solution, time has passed. The main thing here is more basic words: to build a smart face and somewhere to put kafka. Then they&amp;rsquo;ll be behind you in 40 minutes.</description>
    </item>
    <item>
      <title>Встаньте</title>
      <link>http://localhost:1313/posts/%D0%B2%D1%81%D1%82%D0%B0%D0%BD%D1%8C%D1%82%D0%B5/</link>
      <pubDate>Sun, 14 Jul 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/%D0%B2%D1%81%D1%82%D0%B0%D0%BD%D1%8C%D1%82%D0%B5/</guid>
      <description>For many of us, an architect&amp;rsquo;s career began with some sort of purely technical position, where success was largely determined by the ability to communicate with computers.But as an architect, we have to communicate mainly with other people. Whether you are discussing the advantages of a template with developers or explaining to management the pros and cons of buying intermediate software, your communication skills are the key to success.&#xA;Objectively measure the degree of influence of the architect on the project is quite difficult, but one thing is quite clear: if the developers constantly ignore the instructions of the Architect, and the management does not attach importance to his recommendations, the &amp;ldquo;correctness&amp;rdquo; of the actions of architect will not affect the development of his career.</description>
    </item>
    <item>
      <title>Communication is the king, clarity and leadership are his true companions</title>
      <link>http://localhost:1313/posts/%D0%B0%D1%80%D1%85%D0%B8%D1%82%D0%B5%D0%BA%D1%82%D1%83%D1%80%D0%BD%D1%8B%D0%B5-%D0%BA%D0%BE%D0%BC%D0%BF%D1%80%D0%BE%D0%BC%D0%B8%D1%81%D1%81%D1%8B/</link>
      <pubDate>Fri, 12 Jul 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/%D0%B0%D1%80%D1%85%D0%B8%D1%82%D0%B5%D0%BA%D1%82%D1%83%D1%80%D0%BD%D1%8B%D0%B5-%D0%BA%D0%BE%D0%BC%D0%BF%D1%80%D0%BE%D0%BC%D0%B8%D1%81%D1%81%D1%8B/</guid>
      <description>Every software architect should know and understand that you can&amp;rsquo;t get everything at once. In practice, it is impossible to design an architecture that has high performance, high availability, high security and high abstraction at the same time.There is one real story that software architects need to know, understand and tell their clients and colleagues.I mean the history of the Vaza.&#xA;In 1620, there was a war between Sweden and Poland. Wishing to put an end to this expensive war more quickly, the King of Sweden ordered the construction of a gallion called the Vase.It was an unusual ship.The requirements for it were not the same as for any other ship of the time.It was to be more than 60 metres long, carry 64 guns on two battery deck, and also carry 300 soldiers at a time for safe delivery to Poland by sea.</description>
    </item>
    <item>
      <title>Never prioritize your resume over the needs of the client</title>
      <link>http://localhost:1313/posts/never-prioritize-your-resume-over-the-needs-of-the-client/</link>
      <pubDate>Thu, 11 Jul 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/never-prioritize-your-resume-over-the-needs-of-the-client/</guid>
      <description>We, technicians, choose to use certain technologies, methodologies and approaches to solve problems not because they provide the optimal solution, but only because in the depths of our heart we want to mention them in our summary. Such a choice very rarely leads to a positive result.&#xA;The most powerful catalyst for your career will be grateful customers who are in a long queue to recommend you to others – because you have worked so well for them. The kindness of the customers will serve you better than any new-fashioned object of the new language and any newly invented paradigm. While it is very important (and even vital) for an architect to be up to date with the latest trends and technologies, never try to expand your horizons at the expense of the client.</description>
    </item>
    <item>
      <title>Interview tips</title>
      <link>http://localhost:1313/posts/interview-tips/</link>
      <pubDate>Sun, 07 Jul 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/interview-tips/</guid>
      <description>The fate of fate I started to go to interviews again, and I want to share some observations. On this, I just give advice to everyone in enterprise companies about how the recruitment process should be structured.&#xA;Advice to candidates In the last five years, I&amp;rsquo;ve been through several hundred interviews on both sides. So, some life hacking:&#xA;You&amp;rsquo;re going to have to go through the windshields. Those you&amp;rsquo;re not going to go to. You pump the skill, or suddenly something interesting turns out to be, or it&amp;rsquo;ll be the only place with the offer. You never know what&amp;rsquo;s in a box of candy.&#xA;Get some sleep and let yourself rest on the day of wrath. The same live coding is quite a dumb thing; the solution may not come during the call but will appear immediately after.</description>
    </item>
    <item>
      <title>Руководствуйтесь неопределённостью</title>
      <link>http://localhost:1313/posts/%D1%80%D1%83%D0%BA%D0%BE%D0%B2%D0%BE%D0%B4%D1%81%D1%82%D0%B2%D1%83%D0%B9%D1%82%D0%B5%D1%81%D1%8C-%D0%BD%D0%B5%D0%BE%D0%BF%D1%80%D0%B5%D0%B4%D0%B5%D0%BB%D1%91%D0%BD%D0%BD%D0%BE%D1%81%D1%82%D1%8C%D1%8E/</link>
      <pubDate>Sat, 06 Jul 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/%D1%80%D1%83%D0%BA%D0%BE%D0%B2%D0%BE%D0%B4%D1%81%D1%82%D0%B2%D1%83%D0%B9%D1%82%D0%B5%D1%81%D1%8C-%D0%BD%D0%B5%D0%BE%D0%BF%D1%80%D0%B5%D0%B4%D0%B5%D0%BB%D1%91%D0%BD%D0%BD%D0%BE%D1%81%D1%82%D1%8C%D1%8E/</guid>
      <description>When faced with alternatives, people tend to believe that the most important thing is to make the right choice.In design (software products or anything else) this is not the case.The presence of an alternative is a sign that uncertainty in the design of the system needs to be analysed. Use uncertainty as a determining factor to identify places where you can postpone the transition to details or apply breakdown and abstraction to reduce the importance of design decisions.If you strictly “sew” in the system the first decision that came to your mind, it is likely to tie your hands in the future.As a result, random decisions will begin to play an important role, and the flexibility of the software product will decrease.&#xA;One of the simplest and most constructive definitions of architecture was given by Grady Booch: &amp;ldquo;Any architecture is the result of design, but not every design is aimed at creating architecture.</description>
    </item>
    <item>
      <title>Думать о производительности никогда не рано</title>
      <link>http://localhost:1313/posts/%D0%B4%D1%83%D0%BC%D0%B0%D1%82%D1%8C-%D0%BE-%D0%BF%D1%80%D0%BE%D0%B8%D0%B7%D0%B2%D0%BE%D0%B4%D0%B8%D1%82%D0%B5%D0%BB%D1%8C%D0%BD%D0%BE%D1%81%D1%82%D0%B8-%D0%BD%D0%B8%D0%BA%D0%BE%D0%B3%D0%B4%D0%B0-%D0%BD%D0%B5-%D1%80%D0%B0%D0%BD%D0%BE/</link>
      <pubDate>Sun, 30 Jun 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/%D0%B4%D1%83%D0%BC%D0%B0%D1%82%D1%8C-%D0%BE-%D0%BF%D1%80%D0%BE%D0%B8%D0%B7%D0%B2%D0%BE%D0%B4%D0%B8%D1%82%D0%B5%D0%BB%D1%8C%D0%BD%D0%BE%D1%81%D1%82%D0%B8-%D0%BD%D0%B8%D0%BA%D0%BE%D0%B3%D0%B4%D0%B0-%D0%BD%D0%B5-%D1%80%D0%B0%D0%BD%D0%BE/</guid>
      <description>The needs of users of business applications manifest primarily in functional requirements. Non-functional aspects of the system (such as performance, flexibility, downtime, support needs, etc.) are in the architect’s hands. At the same time, preliminary testing of non-functional requirements is often postponed to a very late stage of the development cycle and sometimes fully delegated to the system maintenance team.&#xA;This mistake is much more common than it should be. It can be based on various reasons.Worrying about the speed and flexibility of the program, which is not yet exactly performing the required function, may seem pointless. Test environments and tests themselves are quite complex.Early working versions of the system may not be exposed to a realistic load due to insufficient intensity of use.</description>
    </item>
    <item>
      <title>Screening</title>
      <link>http://localhost:1313/posts/screening/</link>
      <pubDate>Sat, 29 Jun 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/screening/</guid>
      <description>I&amp;rsquo;ve been going to interviews again, and I&amp;rsquo;d like to share some observations. This time we talk about Screening in enterprise companies, and how the recruitment process should be constructed.&#xA;Screening It all starts with it, and tech-screening becomes the norm. Recruiter directly on the first call asks cavernous questions and checks with sparkling. For example:&#xA;how to stop the container? unchanged data typesx in python? What&amp;rsquo;s the PID of the Linux kernel? how do you decipher CAP and PACELC? &amp;hellip; Some of them go even further and create an entire platform with small pieces of code that can be run. 20 questions in 20 minutes. &amp;ldquo;How do I send a message to the generator?&amp;rdquo; or &amp;ldquo;What does this code do?&amp;rdquo; Well, he knows, I&amp;rsquo;t just miss that code on a review, because it&amp;rsquo;s wild.</description>
    </item>
    <item>
      <title>Архитектор должен быть практиком</title>
      <link>http://localhost:1313/posts/%D0%B0%D1%80%D1%85%D0%B8%D1%82%D0%B5%D0%BA%D1%82%D0%BE%D1%80-%D0%B4%D0%BE%D0%BB%D0%B6%D0%B5%D0%BD-%D0%B1%D1%8B%D1%82%D1%8C-%D0%BF%D1%80%D0%B0%D0%BA%D1%82%D0%B8%D0%BA%D0%BE%D0%BC/</link>
      <pubDate>Fri, 28 Jun 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/%D0%B0%D1%80%D1%85%D0%B8%D1%82%D0%B5%D0%BA%D1%82%D0%BE%D1%80-%D0%B4%D0%BE%D0%BB%D0%B6%D0%B5%D0%BD-%D0%B1%D1%8B%D1%82%D1%8C-%D0%BF%D1%80%D0%B0%D0%BA%D1%82%D0%B8%D0%BA%D0%BE%D0%BC/</guid>
      <description>A good architect should set an example to others. He should be able to replace any member of his team and do anything from networking and configuring the assembly process to writing modular tests and performing performance tests. Without a good understanding of the entire range of technologies, an architect is little different from an ordinary project manager.Team members may have deeper knowledge in their narrow fields – this is perfectly normal – but they are unlikely to be able to trust their architect unless he is familiar with the technologies used.As has already been said, an architect is an interface between the technical team and the business, which means that he must understand all the technical aspects in order to play the role of the team representative before the business management, without constantly seeking help.</description>
    </item>
    <item>
      <title>Используйте количественные критерии</title>
      <link>http://localhost:1313/posts/%D0%B8%D1%81%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D1%83%D0%B9%D1%82%D0%B5-%D0%BA%D0%BE%D0%BB%D0%B8%D1%87%D0%B5%D1%81%D1%82%D0%B2%D0%B5%D0%BD%D0%BD%D1%8B%D0%B5-%D0%BA%D1%80%D0%B8%D1%82%D0%B5%D1%80%D0%B8%D0%B8/</link>
      <pubDate>Fri, 21 Jun 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/%D0%B8%D1%81%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D1%83%D0%B9%D1%82%D0%B5-%D0%BA%D0%BE%D0%BB%D0%B8%D1%87%D0%B5%D1%81%D1%82%D0%B2%D0%B5%D0%BD%D0%BD%D1%8B%D0%B5-%D0%BA%D1%80%D0%B8%D1%82%D0%B5%D1%80%D0%B8%D0%B8/</guid>
      <description>&amp;ldquo;Fast&amp;rdquo; can&amp;rsquo;t be a requirement.As well as having a good response time.Or, say, &amp;ldquo;expandable.&amp;ldquo;The main reason is the lack of objective criteria for meeting such requirements.But users still need these features. The task of the architect is to ensure that the system has the necessary qualities, as well as to balance the inevitable contradictions that arise between them.Without objective criteria, the architect depends on the customer’s caprices (“No, I can’t accept the program – it doesn’t work fast enough”) and on the developers obsessed with obsessive ideas (“no, the program is not ready – it isn’t working fast enough”).&#xA;Usually we try to write down all such wishes, as well as any other requirements. But this entry very often looks like a set of foggy epithetics: “flexible”, “friendly to accompany” and so on.</description>
    </item>
    <item>
      <title>Communication is the king, clarity and leadership are his true companions</title>
      <link>http://localhost:1313/posts/communication-is-the-king-clarity-and-leadership-are-his-true-companions-1/</link>
      <pubDate>Tue, 18 Jun 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/communication-is-the-king-clarity-and-leadership-are-his-true-companions-1/</guid>
      <description>Too often, software architects live in ivory towers, leaving specifications to the developers and imposing technologies and directions on them. At the same time, this leads to strife, which is quickly followed by a “popular uprising.&amp;quot; The result is a software product that has nothing to do with the original requirements. Every software architect must be able to explain to his colleagues the goals and objectives of the software project. The keys to effective communication are clarity and leadership.&#xA;Clearness characterizes the process of communication. No one in your group will read a 100-page document justifying your architectural decisions. The ability to express your thoughts clearly is vital to the success of any program or project. From the very beginning of work on the project, adhere to simple explanations and, in no case, start making long descriptions in Word.</description>
    </item>
    <item>
      <title>Find the true meaning of the needs</title>
      <link>http://localhost:1313/posts/find-the-true-meaning-of-the-needs/</link>
      <pubDate>Tue, 18 Jun 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/find-the-true-meaning-of-the-needs/</guid>
      <description>Customers and end-users often demand what they think is an effective solution to a problem. A classic example of this is given by Harry Hillaker, the leading designer of the F-16 Falcon. His group had set the goal of designing an aircraft developing M2–2.5 speeds, which was (and probably remains) a very non-trivial task, especially if the accompanying objective was to create a “cheap” light aircraft. Consider that the force required to overcome the air resistance increases by four times the speed of flight, and imagine how this circumstance affects the weight of the aircraft.&#xA;When the design team asked the Air Force customers why they needed the M2–2.5 speed, they replied, &amp;ldquo;That the aircraft could get out of battle if necessary.&amp;rdquo; When the real need became apparent, the designers were able to solve the main problem and present a workable solution: a mobile aircraft with high traction, providing good acceleration and maneuverability instead of high maximum speed.</description>
    </item>
    <item>
      <title>One line of working code costs 500 lines of specification</title>
      <link>http://localhost:1313/posts/one-line-of-working-code-costs-500-lines-of-specification/</link>
      <pubDate>Mon, 03 Jun 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/one-line-of-working-code-costs-500-lines-of-specification/</guid>
      <description>Proecting is a beautiful thing. A systematic, detailed presentation of the space of the problem and its solution reveals mistakes and reveals opportunities for improvement, sometimes in a very radical way.Specifications play an important role in this, as they define the pattern for building the system.It is very important to think about the entire architecture—both at the macro level, considering the interaction between the components, and at the micro level, penetrating the behavior of components themselves.&#xA;Unfortunately, architects are often fascinated by the design process, falling under the charm of architectural abstractions. However, the specifications themselves have no value. The ultimate objective of the software project is a really functioning system.The architect should always keep this goal in mind and remember that design is only a means, not the end result.</description>
    </item>
    <item>
      <title>Старайтесь не нарушать график</title>
      <link>http://localhost:1313/posts/%D1%81%D1%82%D0%B0%D1%80%D0%B0%D0%B9%D1%82%D0%B5%D1%81%D1%8C-%D0%BD%D0%B5-%D0%BD%D0%B0%D1%80%D1%83%D1%88%D0%B0%D1%82%D1%8C-%D0%B3%D1%80%D0%B0%D1%84%D0%B8%D0%BA/</link>
      <pubDate>Fri, 31 May 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/%D1%81%D1%82%D0%B0%D1%80%D0%B0%D0%B9%D1%82%D0%B5%D1%81%D1%8C-%D0%BD%D0%B5-%D0%BD%D0%B0%D1%80%D1%83%D1%88%D0%B0%D1%82%D1%8C-%D0%B3%D1%80%D0%B0%D1%84%D0%B8%D0%BA/</guid>
      <description>A software project can fail for many reasons.One of the most common sources of project failure is changing the schedule of work during the project execution without proper planning.Such failures can be avoided, but it requires considerable effort on the part of many people.Adjusting the timescale or adding resources to a project usually does not create any problems.Problems start when you are required to do more work in the same timeframe or shorten the schedule without reducing the load.&#xA;The idea that by shortening the schedule you can reduce costs or speed up the delivery of a product is a very common misconception.Typically, overtime is used or &amp;ldquo;less important tasks&amp;rdquo; (such as modular testing) are sacrificed for faster delivery of the product or for enhanced functionality without changing the delivery time.</description>
    </item>
    <item>
      <title>Решений на все случаи жизни не существует</title>
      <link>http://localhost:1313/posts/%D1%80%D0%B5%D1%88%D0%B5%D0%BD%D0%B8%D0%B9-%D0%BD%D0%B0-%D0%B2%D1%81%D0%B5-%D1%81%D0%BB%D1%83%D1%87%D0%B0%D0%B8-%D0%B6%D0%B8%D0%B7%D0%BD%D0%B8-%D0%BD%D0%B5-%D1%81%D1%83%D1%89%D0%B5%D1%81%D1%82%D0%B2%D1%83%D0%B5%D1%82/</link>
      <pubDate>Tue, 28 May 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/%D1%80%D0%B5%D1%88%D0%B5%D0%BD%D0%B8%D0%B9-%D0%BD%D0%B0-%D0%B2%D1%81%D0%B5-%D1%81%D0%BB%D1%83%D1%87%D0%B0%D0%B8-%D0%B6%D0%B8%D0%B7%D0%BD%D0%B8-%D0%BD%D0%B5-%D1%81%D1%83%D1%89%D0%B5%D1%81%D1%82%D0%B2%D1%83%D0%B5%D1%82/</guid>
      <description>The architect must continuously refine and improve his &amp;ldquo;context noe poche&amp;rdquo;, since there is no single universal solution for a wide range of diverse problems.Eberhardt Rechtin, in his book &amp;ldquo;Systems Architecting: Creating &amp;amp; Building Complex Systems&amp;rdquo; (Prentice Hall, 1991):&#xA;“To learn the basic principles of the “eristic approach” to the design of complex systems, ask an experienced architect what he does when faced with a difficult task.His answer would most likely be, &amp;ldquo;I&amp;rsquo;m just using common sense.&amp;quot;&amp;lt;&amp;hellip;&amp;gt;Instead of the term “sensual” it would be better to use the expression “context sensation”1 – knowledge of what is ra zoom in a given context.Education, experience and study of examples allow the architect-practitioner to acquire a considerable power of contextual sense by the moment when it is entrusted to solve a system-level problem – usually it takes decades.</description>
    </item>
    <item>
      <title>Проблемы могут быть больше чем их отражение в зеркале</title>
      <link>http://localhost:1313/posts/%D0%BF%D1%80%D0%BE%D0%B1%D0%BB%D0%B5%D0%BC%D1%8B-%D0%BC%D0%BE%D0%B3%D1%83%D1%82-%D0%B1%D1%8B%D1%82%D1%8C-%D0%B1%D0%BE%D0%BB%D1%8C%D1%88%D0%B5-%D1%87%D0%B5%D0%BC-%D0%B8%D1%85-%D0%BE%D1%82%D1%80%D0%B0%D0%B6%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2-%D0%B7%D0%B5%D1%80%D0%BA%D0%B0%D0%BB%D0%B5/</link>
      <pubDate>Mon, 27 May 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/%D0%BF%D1%80%D0%BE%D0%B1%D0%BB%D0%B5%D0%BC%D1%8B-%D0%BC%D0%BE%D0%B3%D1%83%D1%82-%D0%B1%D1%8B%D1%82%D1%8C-%D0%B1%D0%BE%D0%BB%D1%8C%D1%88%D0%B5-%D1%87%D0%B5%D0%BC-%D0%B8%D1%85-%D0%BE%D1%82%D1%80%D0%B0%D0%B6%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2-%D0%B7%D0%B5%D1%80%D0%BA%D0%B0%D0%BB%D0%B5/</guid>
      <description>I&amp;rsquo;ve been working on a bunch of programming projects.Each of them encountered problems that caused more trouble than the developer team expected.This often occurred as follows: some team members noticed such problems early, but most staff rejected or ignored all symptoms because they did not realize their importance until it was too late.&#xA;This happens for a variety of reasons:&#xA;Problems that seem trivial at an early stage of the project become critical when ix is too late to fix.The story of a welded frog is probably an exaggeration, but it perfectly illustrates what is happening in many projects.&#xA;Some employees often encounter resistance when other team members do not have similar experience or knowledge.Overcoming this resistance requires exceptional courage, confidence and persistence, and these qualities are rarely possessed even by highly paid experienced consultants hired specifically to prevent such problems.</description>
    </item>
    <item>
      <title>Решений может быть несколько</title>
      <link>http://localhost:1313/posts/%D1%80%D0%B5%D1%88%D0%B5%D0%BD%D0%B8%D0%B9-%D0%BC%D0%BE%D0%B6%D0%B5%D1%82-%D0%B1%D1%8B%D1%82%D1%8C-%D0%BD%D0%B5%D1%81%D0%BA%D0%BE%D0%BB%D1%8C%D0%BA%D0%BE/</link>
      <pubDate>Sat, 25 May 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/%D1%80%D0%B5%D1%88%D0%B5%D0%BD%D0%B8%D0%B9-%D0%BC%D0%BE%D0%B6%D0%B5%D1%82-%D0%B1%D1%8B%D1%82%D1%8C-%D0%BD%D0%B5%D1%81%D0%BA%D0%BE%D0%BB%D1%8C%D0%BA%D0%BE/</guid>
      <description>One data model, one message format, one transport mechanism (and generally exactly one basic architectural component, policy, principle, etc.) cannot serve all aspects of a business organization equally well.It seems that this fact is an endless source of surprise and sadness for the developers of the systems.At the same time, it is quite natural: since the organization (the word “organization” is highlighted here with the fat red line) is large enough to worry about how several different tables of accounts will affect the system in the next decade, it must be too large and heterogeneous to be able to handle a single table.&#xA;In the technical field, uniformity can be enforced.And it&amp;rsquo;s very convenient for us.However, in the field of business, a controversial, multifaceted, informal, troubling real world comes into play.</description>
    </item>
    <item>
      <title>Perhaps your main problem is not technology</title>
      <link>http://localhost:1313/posts/perhaps-your-main-problem-is-not-technology/</link>
      <pubDate>Wed, 22 May 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/perhaps-your-main-problem-is-not-technology/</guid>
      <description>Right now, somewhere is suffering the disaster of another project of a wage calculation system&amp;hellip; And probably not alone.&#xA;Why did that happen? Because the developers chose Ruby instead of Java or Python instead of Smalltalk? Because you decided to use Postgres instead of Oracle? or because, although you ought to have selected Linux, you liked the Windows platform better? As you know, all project failures are usually blamed on technology. But was your task really so complex that the Java capabilities were not enough for it?&#xA;Projects are usually created by people, and it is these people that determine the success or failure of the whole project. And once that&amp;rsquo;s the case, we need to think a little bit about how to help them succeed.</description>
    </item>
    <item>
      <title>Простота лучше универсальности</title>
      <link>http://localhost:1313/posts/%D0%BF%D1%80%D0%BE%D1%81%D1%82%D0%BE%D1%82%D0%B0-%D0%BB%D1%83%D1%87%D1%88%D0%B5-%D1%83%D0%BD%D0%B8%D0%B2%D0%B5%D1%80%D1%81%D0%B0%D0%BB%D1%8C%D0%BD%D0%BE%D1%81%D1%82%D0%B8/</link>
      <pubDate>Mon, 20 May 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/%D0%BF%D1%80%D0%BE%D1%81%D1%82%D0%BE%D1%82%D0%B0-%D0%BB%D1%83%D1%87%D1%88%D0%B5-%D1%83%D0%BD%D0%B8%D0%B2%D0%B5%D1%80%D1%81%D0%B0%D0%BB%D1%8C%D0%BD%D0%BE%D1%81%D1%82%D0%B8/</guid>
      <description>A typical problem with many frameworks, class libraries, basic services and other infrastructure code is that they are designed for universal use, without attachment to specific applications. As a result, we get a staggering set of features and settings that are often not used at all or used for the wrong purpose, or even simply turned out to be useless.Most developers work on specific systems, and the pursuit of unlimited versatility rarely serves them well.The best way to universality lies through an in-depth understanding of known concrete examples and analysis of their essence in order to find a fundamental common solution: simplicity as a result of practical experience, rather than universality based on conjecture.&#xA;The priority of simplicity over versatility helps to make a choice between two architectural alternatives, equal in other respects.</description>
    </item>
    <item>
      <title>База данных как Крепость</title>
      <link>http://localhost:1313/posts/%D0%B1%D0%B0%D0%B7%D0%B0-%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85-%D0%BA%D0%B0%D0%BA-%D0%BA%D1%80%D0%B5%D0%BF%D0%BE%D1%81%D1%82%D1%8C/</link>
      <pubDate>Fri, 17 May 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/%D0%B1%D0%B0%D0%B7%D0%B0-%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85-%D0%BA%D0%B0%D0%BA-%D0%BA%D1%80%D0%B5%D0%BF%D0%BE%D1%81%D1%82%D1%8C/</guid>
      <description>In the database datax is stored all information – both entered by employees and received from customers. User interfaces, business logic, and applied logic (and even employees) come and go, and data stays.It is difficult to describe in words how important it is to build a reliable data model in the early days of the project.&#xA;The enormous popularity of flexible design methodologies has led many to think that applications can (and even preferably!) be designed in the course of work.The era of pre-writing complex, exhaustive technical specifications is gone forever! The new school calls for the product to be delivered early and frequently.One line of exploitable code is better than 10 lines in your head.Sounds too good to be true&amp;hellip; at least as far as data is concerned.</description>
    </item>
    <item>
      <title>Всем заправляет бизнес</title>
      <link>http://localhost:1313/posts/%D0%B2%D1%81%D0%B5%D0%BC-%D0%B7%D0%B0%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D1%8F%D0%B5%D1%82-%D0%B1%D0%B8%D0%B7%D0%BD%D0%B5%D1%81/</link>
      <pubDate>Fri, 17 May 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/%D0%B2%D1%81%D0%B5%D0%BC-%D0%B7%D0%B0%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D1%8F%D0%B5%D1%82-%D0%B1%D0%B8%D0%B7%D0%BD%D0%B5%D1%81/</guid>
      <description>In the context of the development of corporate software applications, the architect should become a kind of bridge in the company between the business and technical communities, representing and defending the interests of both sides and often acting as a mediator between them, but at the same time allowing the business to control the affairs.When making technological decisions, the architect must be guided by the business objectives of the company and its surrounding realities.&#xA;Before undertaking a software development project, a commercial company usually plans and announces the desired return on investment (ROI).The architect must accept this indicator and the resulting limitations of the value of the product created for the company.This will help to avoid technical solutions that could lead to excessive expenditure.</description>
    </item>
    <item>
      <title>Live Coding</title>
      <link>http://localhost:1313/posts/live-coding/</link>
      <pubDate>Mon, 13 May 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/live-coding/</guid>
      <description>I&amp;rsquo;ve been going to interviews again, and I&amp;rsquo;d like to share some observations. This time we talk about live coding in enterprise companies and how the recruitment process should be constructed.&#xA;Live Coding There&amp;rsquo;s always a lot of noise around him. Some people like it (interviews), some people don&amp;rsquo;t like it at all (candidates), and someone goes to a psychologist after him for six months. This is not really to understand that the candidate is able to code; there are not enough extensive projects on Github, profile articles with code, reports after all. As I was told, this is done to ensure that everyone is treated equally in recruitment. Well, good luck hiring a leader or a gentleman in five rounds. At the second, he&amp;rsquo;ll ask himself, &amp;ldquo;Do I really need this?</description>
    </item>
    <item>
      <title>Обеспечьте непрерывную интеграцию</title>
      <link>http://localhost:1313/posts/%D0%BE%D0%B1%D0%B5%D1%81%D0%BF%D0%B5%D1%87%D1%8C%D1%82%D0%B5-%D0%BD%D0%B5%D0%BF%D1%80%D0%B5%D1%80%D1%8B%D0%B2%D0%BD%D1%83%D1%8E-%D0%B8%D0%BD%D1%82%D0%B5%D0%B3%D1%80%D0%B0%D1%86%D0%B8%D1%8E/</link>
      <pubDate>Sat, 11 May 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/%D0%BE%D0%B1%D0%B5%D1%81%D0%BF%D0%B5%D1%87%D1%8C%D1%82%D0%B5-%D0%BD%D0%B5%D0%BF%D1%80%D0%B5%D1%80%D1%8B%D0%B2%D0%BD%D1%83%D1%8E-%D0%B8%D0%BD%D1%82%D0%B5%D0%B3%D1%80%D0%B0%D1%86%D0%B8%D1%8E/</guid>
      <description>The collection has long ceased to play the role of the &amp;ldquo;Big Bang&amp;rdquo; in the design of projects.Both architects (both at the application level and at the corporate level) should encourage the use of continuous integration methods and tools in each project.&#xA;The term continuous integration (CI, Continuous Integration) was first proposed by Martin Fowler as a design template. It means a set of methods and tools that ensure regular automatic assembly and testing of applications over short intervals of time (usually on an integration server specially designed to perform these operations).For any modern software project, the practice of continuous integration, combining modular testing methods and tools with automated assembly tools, becomes mandatory.&#xA;Continuous integration affects an integral element of the software development process – the point of converting the source code into a working application.</description>
    </item>
  </channel>
</rss>
