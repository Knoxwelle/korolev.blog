+++
title = 'Welcome to the real world'
date = 2024-06-01T00:00:00-07:00
draft = false
categories = []
tags = ["technophiles", "receipts", "data", "services", "starbucks", "world", "payments", "letters", "use", "problems"]
cover_image='/images/cover/knoxwelle__2017-02-14T215743.000Z.jpg'
+++
Technophiles love precision – especially programmers who live in a world of zeros and ones.They are used to working with binary decisions: one/zero, true/false, yes/no.Everything is clear and consistent; foreign key constraints, atomic transactions, and checksums protect against surprises.

Unfortunately, the real world is not so orderly.Clients place orders, and a second later, they cancel them.Receipts are rejected, letters are lost, payments are delayed, and promises are broken. Data entry errors occur more often than we would like.Users prefer "shallow" interfaces that provide simultaneous access to many functions, rather than a long and narrow corridor of the "process" of data entry, which is easier to implement and seems more "logical" to many developers. The execution of the program is now controlled not by the call stack, but by the user.

Distributed systems only exacerbate the situation, as a multitude of new inconsistencies come into play.Services may be unavailable, change without prior notice, and do not provide transactional guarantees.When running an application on thousands of computers, the question is no longer whether a failure will occur, but rather when it will happen.Such systems have weak coupling, asynchronicity, and parallelism, and do not conform to traditional transactional semantics...Don't you want to take the blue pill?!

The wonderful new world of computer technology is cracking at the seams – so what should we do?As is often the case, recognizing the problem becomes the first important step toward its resolution. 

Say goodbye to the old good deterministic call stack architecture, where you determined what happens, when, and in what order.Instead, be prepared to respond to events at any time and in any order, restoring the system's state as needed.Make asynchronous requests in parallel instead of calling methods sequentially.To avoid complete chaos, model your application using event-driven process chains or state models.Neutralize errors through correction, repeated attempts, or test operations.

Does it sound too intimidating?You weren't counting on that, were you?Fortunately, in the real world, similar problems have been dealt with for a long time: delayed letters, broken promises, mixed-up messages, payments sent to the wrong accounts – there are countless examples.As a result, people are forced to resend letters, rewrite incorrect orders, and ignore reminders about payments that have already been made.Don't blame the real world for your problems – it's better to use it to find solutions.After all, Starbucks doesn't use the two-phase commit protocol either.Welcome to the real world!