+++
title = 'Architecture is not the only factor in reuse'
date = 2024-07-12T00:00:00-07:00
draft = false
categories = []
tags = ["donald knuth", "young arrowers", "information", "team", "people", "designers", "developers"]
cover_image='/images/cover/knoxwelle__2021-06-07T090057.000Z.jpg'
+++
It appears that a well-planned and cleverly executed architecture, or well-thought-out infrastructure, is perfect for repurposing within your company. But in practice, only those who are aware of an architecture, infrastructure, or system's existence will be able to utilize it again, no matter how exquisite and lovely it may be. Your organization's developers and designers should be aware of the existence of any libraries, architectures, infrastructures, or code fragments, as well as where to locate all the information required to understand these components (documentation, compatibility, and version data). The obvious and straightforward reality is that people do not take into account options that they are unaware even exist. Certain pieces can only be reused provided information about them is regularly shared.
Within your company, there are numerous ways to share information about reusable items: from an email with updates on version changes in the source repository to a wiki with an RSS feed that provides information about updates (particularly helpful for extremely large teams). In a very small team, a lead developer or designer can tell his colleagues during a private conversation or just by announcing anything loudly to everyone in the workplace.Generally speaking, the most important factor is that knowledge about reusable pieces be disseminated in any way possible. Don't let chance govern the sharing of knowledge.


##...be familiar with their use


Reusing elements is contingent upon one's qualifications and skill set. Of course, some people are able to "resonate" with programming and design, to use Donald Knuth's phrase. Everyone of us has worked with great designers and architects who have an amazing—even terrifying—absorption of information both quickly and deeply. But such individuals are uncommon. Probably just competent, trustworthy, and reasonable developers and designers make up the rest of the crew. They must be instructed.
It's possible that the inheritance model used by the infrastructure designer is unclear to developers and designers, or that they are unaware of the precise pattern employed in the design. They require simple access to information, preferably through training and in the form of current documents. A little bit of training work can go a long way toward preparing the team to reuse specific components.


## Consider it preferable to trying it again on your own.


Many people—developers in particular—prefer to figure out solutions on their own instead of asking for assistance. They perceive asking questions about how something works as a show of weakness, if not ignorance. The age level and personality makeup of each team member have a significant role; various people interpret the phrase "better than to do again" in different ways. Because it feeds their ego, "Young Arrowers" always want to write the correct code themselves. More seasoned participants are more likely to acknowledge that another person has considered this issue before and may be able to offer a solution.
Naturally, your team will produce them again on its own if it is unaware of where to discover reusable materials or how to use them. And the bills, you will have to pay.