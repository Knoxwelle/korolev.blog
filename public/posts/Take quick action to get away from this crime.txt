+++
title = 'Take quick action to get away from this crime'
date = 2024-02-12T00:00:00-07:00
draft = false
categories = []
tags = ["time", "john", "work", "tests", "code", "system", "development", "developers"]
cover_image='/images/cover/knoxwelle__2020-01-03T025407.000Z.jpg'
+++
It's almost evening. The command is nice about the new features planned for the present iteration; even the room seems to be pulsing at a working rate. However, John is a little hurried because he's waiting for a date. There's still time for him to dash off, rework his part of the code, build it, and upload it to the source code repository. The "red light" illuminates, and the app's construction is interrupted after a few minutes. John acted precipitously, believing that his lack of time for automated tests would force the team to stall.

The situation has changed; the working rhythm has failed. Now everyone knows that when they update the code from the version control system, it will break on their own computers. The team faces a big hurdle because of this because they have to integrate a lot of code to prepare for the next show. The team has really benefited from John's early contributions; integration won't occur unless someone makes the effort to reverse the changes.

It is against the law to finish work quickly and run since this disrupts the normal flow of labor. Unfortunately, this is a common tactic used by engineers to free up some time for themselves, which is disrespectful and ultimately wastes other people's time. Still, it happens all around the world. Why? 

This is when the architect's position becomes relevant. You work hard to ensure that a server is prepared for continuous integration, to teach developers creative methods for development (such as development through testing), and to build a flexible architecture. You also need to create a culture in the company that prohibits wasting other people's time. Because it has the ability to change developers' behavior, this necessitates, among other things, the creation of an excellent automated testing infrastructure. Quick tests will encourage developers to run them more often, which is good in and of itself, but they also won't leave their colleagues with defective code.If the tests depend on external systems or require database references, make the appropriate changes to the tests so that they may be run locally with dots (or at least with a database saved in memory). Next, give the compilation server permission to execute the tests slowly. If you make people wait for the computer to finish its duty, they will start looking for traps, which will be problematic for everyone else.

Don't waste time making sure the system responds rapidly. This increases output, eliminates reasons for employees to miss work, and finally aids in the development process' acceleration. Create surrogates and simulators, eliminate dependencies, divide the system into smaller modulesâ€”do all within your power to guarantee that your colleagues are never, not even remotely, inclined to follow the maxim "do in a hurry and escape."