<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C on Korolev Blog</title>
    <link>http://localhost:1313/categories/c/</link>
    <description>Recent content in C on Korolev Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 08 Dec 2024 00:00:00 -0700</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/c/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Programming paradigms</title>
      <link>http://localhost:1313/posts/programming-paradigms/</link>
      <pubDate>Sun, 08 Dec 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/programming-paradigms/</guid>
      <description>Psychology of Programming: It has long been known that a programmer&amp;rsquo;s professionalism directly depends on the number of different programming paradigms they masterâ€”not just having heard of them and knowing about them, but being able to actually use them in their work.&#xA;Every programmer starts with some one language. This language has an the predominant influence on how a programmer sees software. But no matter how long a programmer has worked with this language, if they only work with it, they will only know this language. The thinking of a programmer who knows only one language is limited to the capabilities of that language.&#xA;A programmer learning a second language will encounter difficulties, especially if the computational model of the second language differs from the first.</description>
    </item>
    <item>
      <title>Encapsulate behavior, not just state</title>
      <link>http://localhost:1313/posts/encapsulate-behavior-not-just-state/</link>
      <pubDate>Wed, 18 Sep 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/encapsulate-behavior-not-just-state/</guid>
      <description>In systems theory, there is the concept of isolation, which is among the most useful when it comes to large and complex system structures. In the software development industry, everyone understands the value of isolating one entity within another, in other words, encapsulation. In programming languages, subprograms and functions, modules and packages, classes, etc., are used to ensure isolation.&#xA;Modules and packages solve large-scale encapsulation tasks, while how classes, subprograms, and functions are designed to solve the same problems in a more at a low level. Over the years of working, I have discovered that of all types of encapsulation The most difficult thing for programmers is encapsulation in classes. It is not uncommon to encounter a class where the only method, main, has 5000 lines, or a class, in which there are only set and get methods for its basic attributes.</description>
    </item>
  </channel>
</rss>
