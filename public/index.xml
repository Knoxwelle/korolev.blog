<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tiny Dev Blog</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on Tiny Dev Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 12 Aug 2024 00:00:00 -0700</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Creating architecture as the art of balance</title>
      <link>http://localhost:1313/posts/creating-architecture-as-the-art-of-balance/</link>
      <pubDate>Mon, 12 Aug 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/creating-architecture-as-the-art-of-balance/</guid>
      <description>The traditional technical processes that come to mind when creating a software architecture are breaking the system down into its component parts, defining interfaces, assigning tasks, using templates, and performance tuning. The architect also needs to consider a variety of additional factors, such as output management, deployment settings, simplicity of usage, safety, and ease of maintenance.All of these procedural and technical details, meanwhile, have to be pertinent to the needs of the stakeholders.One of the best ways to make sure that the requirements specifications for the product being developed are comprehensive is to consider these interests during the requirements analysis process.&#xA;Each project participant has interests that impact the corporation as a whole as well as the software development process the company uses. The architect&amp;rsquo;s final set of priorities is derived from a consideration of these interests.</description>
    </item>
    <item>
      <title>Do it in a hurry and escape this crime</title>
      <link>http://localhost:1313/posts/do-it-in-a-hurry-and-escape-this-crime/</link>
      <pubDate>Sun, 11 Aug 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/do-it-in-a-hurry-and-escape-this-crime/</guid>
      <description>Evening is drawing near. Even the air in the room seems to be pulsing at a working pace; the command is pleasant regarding the new features planned for the current iteration. But John is waiting for a date, so he&amp;rsquo;s a touch rushed. He still has time to rush off, rewrite his portion of the code, build it, and register it in the source code management system. After a few minutes, the app&amp;rsquo;s assembly is disrupted, and the &amp;ldquo;red light&amp;rdquo; is lit.John acted rashly, assuming that the team would stall because he didn&amp;rsquo;t have time for automated tests.&#xA;The working rhythm has failed; the circumstances have altered. Everyone is now aware that updating the code from the version control system will cause it to malfunction on their local machines.</description>
    </item>
    <item>
      <title>Application performance determined by architecture</title>
      <link>http://localhost:1313/posts/application-performance-determined-by-architecture/</link>
      <pubDate>Sat, 10 Aug 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/application-performance-determined-by-architecture/</guid>
      <description>The architecture of an application determines its performance. Although this claim appears clear at first glance, practical experience indicates otherwise. Software architects, for instance, frequently think that application performance issues can be resolved by simply moving to a different software infrastructure manufacturer. This notion could have its roots in the noise surrounding test results; for instance, claims that the leading company&amp;rsquo;s product performs 25% better than its closest rival&amp;rsquo;s could be the cause of this belief. However, given the overall low performance, which stems from architectural inefficiencies, the stated 25% (one millisection) means relatively little if the competition product completes the operation in 4 milliseconds and the leading product completes it in 3 milliseconds.&#xA;Other groups of people, like the developers&amp;rsquo; support service and the authors of the books on app performance management, advise you to perform the subtle configuration of the application&amp;rsquo;s infrastructure, such as experimenting with memory allocation operations, connectivity pool sizes, flow pool sizes, and so forth, in addition to IT managers and performance testing teams.</description>
    </item>
    <item>
      <title>Failures are inevitable</title>
      <link>http://localhost:1313/posts/failures-are-inevitable/</link>
      <pubDate>Wed, 07 Aug 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/failures-are-inevitable/</guid>
      <description>It makes it possible to withstand isolated hardware failures, but it also makes it more likely that the system will malfunction at least once at any given time.&#xA;Additionally susceptible is the software code. We use monitoring tools to record application problems; but, as these tools rely on software code, they are likewise susceptible to malfunction.&#xA;Because humans make mistakes, we attempt to automate our workflows, diagnoses, and actions.Automation lowers the probability of errors resulting from rule violations but raises the probability of errors originating from rule noncompliance.A human being can react to a wider variety of situations than any automated technology.&#xA;We&amp;rsquo;re including monitoring methods in automation tools because of this. Fresh flaws in new software. Hardware, software, and lengthy communication links make up networks.</description>
    </item>
    <item>
      <title>Reduce the intrinsic complexity and eliminate the incidental complexity</title>
      <link>http://localhost:1313/posts/reduce-the-intrinsic-complexity-and-eliminate-the-incidental-complexity/</link>
      <pubDate>Sun, 04 Aug 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/reduce-the-intrinsic-complexity-and-eliminate-the-incidental-complexity/</guid>
      <description>For instance, it takes a lot of work to coordinate air traffic at the national level. To avoid collisions in the air and on the runways, the control system must continuously monitor each aircraft&amp;rsquo;s exact location, including height, speed, direction, and destination. Additionally, it&amp;rsquo;s critical to swiftly manage aircraft schedules in order to prevent traffic jams at airports under continuously changing conditions. A drastic change in the weather necessitates a complete revision of the timetable.&#xA;Conversely, problems that we believe must be resolved in order to lessen the inherent complexity are the source of unintended complexity. A modest example of complexity is the flight management system, which is now out of date and yet in use.The system was created to handle the difficult task of coordinating the flight of thousands of aircraft; however, this solution has drawbacks of its own.</description>
    </item>
    <item>
      <title>You negotiate more often than you think</title>
      <link>http://localhost:1313/posts/you-negotiate-more-often-than-you-think/</link>
      <pubDate>Tue, 30 Jul 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/you-negotiate-more-often-than-you-think/</guid>
      <description>All of us have been &amp;ldquo;buried&amp;rdquo; for savings by &amp;ldquo;budget&amp;rdquo; modifications, which are clever technology solutions.The dialogue proceeds as follows:&#xA;&amp;ldquo;Is X really necessary?&amp;rdquo; The sponsor of the project queries.&#xA;Almost anything that is necessary for the system can be swapped out for X, including extra servers, software licenses, external backups, and power sources. The topic is always posed in a colloquial manner, as though you are spending all of your allowance on comic books and chewing gum, and mature individuals should consider investing in new shells, which will hold their future earnings.&#xA;&amp;ldquo;Yes,&amp;rdquo; is the appropriate response to this query. utterly essential.&amp;quot; But virtually nobody responds, for whatever reason.&#xA;We have technical schooling, after all, and compromise is the skill of every technical profession.</description>
    </item>
    <item>
      <title>Get up</title>
      <link>http://localhost:1313/posts/stand-up/</link>
      <pubDate>Sun, 14 Jul 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/stand-up/</guid>
      <description>Many of us started our careers as architects in some form of very technical role where computer communication skills were essential to succeed. However, our primary means of communication as architects is with other people. Your ability to communicate effectively is essential for success, whether you are arguing with developers about the benefits of using a template or outlining the advantages and disadvantages of purchasing intermediary software to management.&#xA;It is challenging to measure the architect&amp;rsquo;s influence on the project objectively, but one thing is certain: the &amp;ldquo;correctness&amp;rdquo; of the architect&amp;rsquo;s actions will not have an impact on the trajectory of his career if the developers consistently disregard his instructions and the management does not value his advice. Skilled architects know that they must &amp;ldquo;promote&amp;rdquo; their concepts, and good communication is necessary for this.</description>
    </item>
    <item>
      <title>Architectural compromises</title>
      <link>http://localhost:1313/posts/architectural-compromises/</link>
      <pubDate>Fri, 12 Jul 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/architectural-compromises/</guid>
      <description>High performance, high availability, high security, and high abstraction cannot all be achieved at the same time in an architecture. Software architects just need to be aware of, comprehend, and share one true story with their clients and peers. I&amp;rsquo;m referring to Vaza&amp;rsquo;s past.&#xA;There was a conflict between Sweden and Poland in 1620. The Swedish King ordered the building of a gallion known as the Vase in an attempt to swiftly conclude this costly conflict. The ship was unique. It had different specifications than any other ship of the era. In addition to carrying 64 weapons on two battery decks and transporting 300 men at a time safely to Poland by sea, it had to be longer than sixty meters. There was not enough money, and there was running out of time (sounds familiar?</description>
    </item>
    <item>
      <title>Never prioritize your resume over the needs of the client</title>
      <link>http://localhost:1313/posts/never-prioritize-your-resume-over-the-needs-of-the-client/</link>
      <pubDate>Thu, 11 Jul 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/never-prioritize-your-resume-over-the-needs-of-the-client/</guid>
      <description>As technicians, we select specific technologies, tactics, and methods to address issues not because they offer the best solution but rather because we sincerely want to include them in our synopsis. Making such a decision almost never has favorable outcomes.&#xA;Because you have done so successfully for them, your grateful clients who are waiting in line to refer you to others will be the most potent career catalyst. You will get better service from the kind clients than from any newly created paradigm or trendy object in the new language. Even though staying current with emerging ideas and technology is crucial for architects, you should never try to take on more work at the client&amp;rsquo;s expense. As architects, you should never forget that you are responsible for the success of your organization.</description>
    </item>
    <item>
      <title>Be guided by uncertainty</title>
      <link>http://localhost:1313/posts/be-guided-by-uncertainty/</link>
      <pubDate>Sat, 06 Jul 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/be-guided-by-uncertainty/</guid>
      <description>People often think that making the best decision is what matters most when presented with options.This is untrue in design, whether it be software products or anything else. An analysis of the uncertainty in the system&amp;rsquo;s design is necessary when an alternative exists. Use breakdown and abstraction to lessen the significance of design decisions, or use uncertainty as a deciding factor to find areas where you can delay the transition to specifics.It&amp;rsquo;s conceivable that you&amp;rsquo;ll tie your hands later if you blindly &amp;ldquo;sew&amp;rdquo; whatever decision comes to mind into the system.As a result, the software product&amp;rsquo;s flexibility will decline and random judgments will start to take center stage.&#xA;Grady Booch provided one of the clearest and most helpful definitions of architecture, saying that &amp;ldquo;though not all designs are intended to result in architecture, all architecture is the product of design.</description>
    </item>
    <item>
      <title>About</title>
      <link>http://localhost:1313/about/about/</link>
      <pubDate>Fri, 05 Jul 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/about/about/</guid>
      <description>Hi, I am Stan,&#xA;I was born in Sochi, but since 2018 I have been living in Vancouver, British Columbia. Who am I?&#xA;Software Developer with expertise in all aspects of enterprise-grade commercial architecture standards. Software Automation expert responsible for delivering software quality via regression in CI/CD pipeline, directing teams for performance. AWS certified. Ph.D.&#xA;I have experience in the information and telecommunication technology industry for more than 17 years. Throughout my career, I have built a number of large-scale, cross-country software systems; most of them are still running in production.&#xA;Once a month, I go somewhere. Not for work, but because I love traveling. I write rather superficially and briefly, depending on my mood. Even though I fly a lot on airplanes, I will not write here about how to choose a seat on a plane, accumulate miles, or transfer to business class.</description>
    </item>
    <item>
      <title>Resume</title>
      <link>http://localhost:1313/resume/resume/</link>
      <pubDate>Fri, 05 Jul 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/resume/resume/</guid>
      <description>Download in PDF&#xA;Stan Korolev (1261015 B.C. LTD.) – SOFTWARE DEVELOPER&#xA;1225 Richards Street, Vancouver, BC, V6B 1E6, Canada 1-778-231-1372 korolevst@gmail.com www.linkedin.com/in/korolevst/ www.salesforce.com/trailblazer/korolevst Software Developer with expertise in all aspects of enterprise-grade commercial architecture standards. Software Automation expert responsible for delivering software quality via regression in CI/CD pipeline, directing teams for performance. AWS certified. Ph.D.&#xA;SUMMARY OF QUALIFICATIONS&#xA;7+ years of expertise in Software Engineering, focusing on Salesforce and AWS. Extensive experience in Software Development Life Cycle (SDLC). Proficient in Object Oriented Programming languages (Java, C#, JavaScript, Ruby). Hands-on experience in Salesforce development and integration (Kafka). API integration and testing within microservices architecture (SOAP and REST). Performing functional test automation utilizing Selenium WebDriver. Professional solution for Cloud migration into Amazon Web Services (AWS) and Azure.</description>
    </item>
    <item>
      <title>It is never too early to think about productivity</title>
      <link>http://localhost:1313/posts/it-is-never-too-early-to-think-about-productivity/</link>
      <pubDate>Sun, 30 Jun 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/it-is-never-too-early-to-think-about-productivity/</guid>
      <description>Functional requirements are where business application users&amp;rsquo; needs are mostly expressed. The architect is in charge of the system&amp;rsquo;s non-functional elements, which include performance, flexibility, downtime, support requirements, etc. Simultaneously, initial testing of non-functional needs is sometimes completely assigned to the system maintenance team or delayed until a very late point in the development cycle.&#xA;This is a far more frequent error than it ought to be. It may be founded on a number of factors.It may seem futile to worry about the program&amp;rsquo;s speed and adaptability when it isn&amp;rsquo;t precisely fulfilling the necessary role yet. Both the test settings and the tests themselves are highly intricate. Due to low use intensity, early working versions of the system might not have been subjected to a realistic load.</description>
    </item>
    <item>
      <title>Interview at Enterprise</title>
      <link>http://localhost:1313/posts/interview-at-enterprise/</link>
      <pubDate>Sat, 29 Jun 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/interview-at-enterprise/</guid>
      <description>I&amp;rsquo;ve started attending interviews once more, and I would want to offer some findings. This episode, we discuss screening in large corporations and the design of the hiring process.&#xA;Screening From there, tech-screening spreads like wildfire. On the initial call, the recruiter asks a ton of questions and checks with sparkling. As an illustration:&#xA;How can the container be stopped? Python&amp;rsquo;s unaltered data typesx? What is the Linux kernel&amp;rsquo;s PID? How are CAP and PACELC interpreted? -&amp;hellip; Some even go so far as to build a full platform out of executable little bits of code. Twenty minutes, twenty questions. &amp;ldquo;How do I send a message to the generator?&amp;rdquo; Alternatively &amp;ldquo;What does this code do?&amp;rdquo; He&amp;rsquo;s aware that I wouldn&amp;rsquo;t just overlook that code on a review because it&amp;rsquo;s so bizarre.</description>
    </item>
    <item>
      <title>The architect must be a practitioner</title>
      <link>http://localhost:1313/posts/the-architect-must-be-a-practitioner/</link>
      <pubDate>Fri, 28 Jun 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/the-architect-must-be-a-practitioner/</guid>
      <description>A competent architect ought to lead by example. He should be able to take the position of any team member and handle any task, including creating modular tests, conducting performance tests, and setting up networking and the assembly process. In the absence of a thorough comprehension of all available technologies, an architect is really no different from a regular project manager.Although it is rather typical for team members to be more knowledgeable in their specialized professions, they are unlikely to be able to trust their architect unless he is conversant with the technology being employed.Since an architect serves as a liaison between the technical team and the company, as has already been mentioned, he must be well-versed in all technical facets in order to represent the team to the business management without continuously seeking assistance.</description>
    </item>
    <item>
      <title>Use quantitative criteria</title>
      <link>http://localhost:1313/posts/use-quantitative-criteria/</link>
      <pubDate>Fri, 21 Jun 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/use-quantitative-criteria/</guid>
      <description>You can&amp;rsquo;t make &amp;ldquo;fast&amp;rdquo; a prerequisite. In addition to having a fast reaction time.alternatively, &amp;ldquo;expandable.&amp;rdquo; The primary cause is the absence of impartial standards for fulfilling these obligations.Users nevertheless require these features. Ensuring that the system has the required attributes and balancing the inevitable contradictions that occur between them are the tasks of the architect. Without objective standards, the developer&amp;rsquo;s fixation with obsessive concepts (“No, the program is not ready; it isn&amp;rsquo;t working fast enough”) and the architect&amp;rsquo;s whims (“No, I can&amp;rsquo;t accept the program; it doesn&amp;rsquo;t work fast enough”) are what the architect counts on.&#xA;Usually, we make an effort to record all such requests along with any additional specifications. However, this entry frequently appears to be a collection of hazy adjectives, such as &amp;ldquo;flexible,&amp;rdquo; &amp;ldquo;friendly to accompany,&amp;rdquo; and so forth.</description>
    </item>
    <item>
      <title>Communication is the king, clarity and leadership are his true companions</title>
      <link>http://localhost:1313/posts/communication-is-the-king-clarity-and-leadership-are-his-true-companions/</link>
      <pubDate>Tue, 18 Jun 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/communication-is-the-king-clarity-and-leadership-are-his-true-companions/</guid>
      <description>All too frequently, software architects reside in ivory towers, dictating technologies and instructions to developers while leaving them with little to no guidance. Simultaneously, this causes conflict, which is soon followed by a &amp;ldquo;popular uprising.&amp;rdquo; The end product is a piece of software that bears no relation to the original specifications. It is imperative for any software architect to be able to articulate to his peers the aims and purposes of the software project. Effective communication relies on leadership and clarity.&#xA;A communication procedure that is clear and concise. A one hundred-page document explaining your architectural choices will not be read by anyone in your group. Effective communication of ideas is essential for any program or effort to succeed. When starting work on the project, stick to brief explanations and don&amp;rsquo;t start writing lengthy word descriptions.</description>
    </item>
    <item>
      <title>Find the true meaning of the needs</title>
      <link>http://localhost:1313/posts/find-the-true-meaning-of-the-needs/</link>
      <pubDate>Tue, 18 Jun 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/find-the-true-meaning-of-the-needs/</guid>
      <description>Clients and end users frequently insist on what they perceive to be a workable solution to an issue. Leading F-16 Falcon designer Harry Hillaker provides a prime illustration of this. His team&amp;rsquo;s mission was to construct an airplane that could reach M2-2.5 speeds. This was (and probably still is) a tremendously difficult undertaking, especially if the secondary goal was to build a light aircraft that was &amp;ldquo;cheap.&amp;rdquo;&#xA;The Air Force clients told the design team that they required the M2–2.5 speed so that the aircraft could escape combat if necessary. The primary issue was resolved, and a feasible solution was presented by the designers when the true necessity became evident. This was in the form of a mobile aircraft with strong traction that offered good acceleration and maneuverability rather than a high top speed.</description>
    </item>
    <item>
      <title>One line of working code costs 500 lines of specification</title>
      <link>http://localhost:1313/posts/one-line-of-working-code-costs-500-lines-of-specification/</link>
      <pubDate>Mon, 03 Jun 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/one-line-of-working-code-costs-500-lines-of-specification/</guid>
      <description>It is lovely to promethize. In this regard, specifications are crucial since they establish the framework for system construction. It is crucial to consider the architecture as a whole, taking into account the behavior of individual components as well as the interactions between them on a micro and macro scale.&#xA;Regrettably, architects are frequently enthralled with the design process and are drawn to architectural abstractions. But the specs are worthless in and of themselves. A truly functional system is the software project&amp;rsquo;s ultimate goal. This objective should constantly remain in the architect&amp;rsquo;s mind, and they should never forget that design is merely a tool, not the final product. The skyscraper&amp;rsquo;s architect would soon come to regret disobeying the rules of physics in favor of the building&amp;rsquo;s elegance.</description>
    </item>
    <item>
      <title>Try not to break the schedule</title>
      <link>http://localhost:1313/posts/try-not-to-break-the-schedule/</link>
      <pubDate>Fri, 31 May 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/try-not-to-break-the-schedule/</guid>
      <description>Numerous factors can cause a software project to fail. Changing the work schedule mid-project without enough planning is one of the most frequent causes of project failure. These kinds of failures are preventable, but it will take a lot of work from many individuals. Adding resources or modifying the timeline to a project typically doesn&amp;rsquo;t cause any issues. When you have to work more in the same amount of time or reduce the timetable without lowering the workload, problems arise.&#xA;A very prevalent fallacy is that you can cut expenses or expedite product delivery by shortening the timeline. Usually, extra hours are worked or &amp;ldquo;less important tasks&amp;rdquo; (such modular testing) are given up for quicker product delivery or for better functionality without affecting delivery time.</description>
    </item>
    <item>
      <title>There are no solutions for all cases of life</title>
      <link>http://localhost:1313/posts/there-are-no-solutions-for-all-cases-of-life/</link>
      <pubDate>Tue, 28 May 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/there-are-no-solutions-for-all-cases-of-life/</guid>
      <description>Since there isn&amp;rsquo;t a single, all-encompassing solution for a broad variety of various challenges, the architect must constantly hone and enhance his &amp;ldquo;context noe poche.&amp;rdquo; In &amp;ldquo;Systems Architecting: Creating &amp;amp; Building Complex Systems&amp;rdquo; (Prentice Hall, 1991), Eberhardt Rechtin writes:&#xA;Most likely, he would say, &amp;ldquo;I&amp;rsquo;m just using common sense.&amp;rdquo; &amp;lt;&amp;hellip;&amp;gt; It might be preferable to use the phrase &amp;ldquo;context sensation&amp;quot;1—knowledge of what is relevant in a certain context—instead of the word &amp;ldquo;sensual.&amp;rdquo; Through education, experience, and case studies, the architect-practitioner can develop a strong contextual awareness by the time they are asked to tackle a system-level issue, which typically takes decades.&#xA;I believe that one of the main issues facing the software business is that projects are frequently assigned to individuals who lack sufficient contextual awareness.</description>
    </item>
    <item>
      <title>Problems can be more than their reflection in the mirror</title>
      <link>http://localhost:1313/posts/problems-can-be-more-than-their-reflection-in-the-mirror/</link>
      <pubDate>Mon, 27 May 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/problems-can-be-more-than-their-reflection-in-the-mirror/</guid>
      <description>I have several programming projects that I have been working on.They all ran into issues that proved to be more problematic than the development team had anticipated.This frequently happened in the following ways: while some team members identified these issues early on, the majority of employees rejected or disregarded any indications because they didn&amp;rsquo;t recognize their significance until it was too late.&#xA;There are several reasons why this occurs:&#xA;Issues that appear unimportant early in the project grow important when it is too late to address them.Although the tale of the welded frog is undoubtedly exaggerated, it well captures what goes wrong in many undertakings.&#xA;Some workers frequently run into opposition when other team members lack comparable expertise or experience.Even highly compensated seasoned consultants recruited expressly to avoid such issues rarely possess the guts, confidence, and perseverance needed to overcome this opposition.</description>
    </item>
    <item>
      <title>There may be several solutions</title>
      <link>http://localhost:1313/posts/there-may-be-several-solutions/</link>
      <pubDate>Sat, 25 May 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/there-may-be-several-solutions/</guid>
      <description>A single data model, communication format, transport mechanism, and typically a single fundamental architectural element, policy, principle, etc., cannot adequately address every facet of a corporate organization. It appears that the system developers are perpetually surprised and saddened by this fact. It makes sense, though, that the organization—which is denoted here by the thick red line—must be too big and diverse to manage a single table, given that it is large enough to worry about the impact of multiple tables of accounts on the system over the course of the next ten years.&#xA;It&amp;rsquo;s also quite practical for us. Nonetheless, the contentious, complex, unofficial, and unsettling actual world of business is involved.Even worse, you have to deal with people&amp;rsquo;s perceptions of particular situations in specific regions of the world rather than the actual world.</description>
    </item>
    <item>
      <title>Perhaps your main problem is not technology</title>
      <link>http://localhost:1313/posts/perhaps-your-main-problem-is-not-technology/</link>
      <pubDate>Wed, 22 May 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/perhaps-your-main-problem-is-not-technology/</guid>
      <description>Somewhere right now, a different wage calculation project is failing miserably&amp;hellip; and most likely not by yourself.&#xA;What caused that to occur? because the developers opted for Ruby over Smalltalk or Java or Python? since you choose to utilize Postgres over Oracle? or because you preferred the Windows platform even if you should have chosen Linux? As you are aware, technology is frequently held responsible for project failures.&#xA;People normally establish projects, and it is up to these individuals to decide whether the project as a whole succeeds or fails. And once that is the case, we ought to consider our options for assisting them in being successful.&#xA;Per, you believe that there is a team member that is underperforming and impeding the project&amp;rsquo;s progress.</description>
    </item>
    <item>
      <title>Simplicity is better than versatility</title>
      <link>http://localhost:1313/posts/simplicity-is-better-than-versatility/</link>
      <pubDate>Mon, 20 May 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/simplicity-is-better-than-versatility/</guid>
      <description>The fact that many frameworks, class libraries, basic services, and other infrastructure code are made to be used universally and aren&amp;rsquo;t tied to any particular application is a common issue with them. The majority of developers specialize in particular systems; therefore, trying to be as versatile as possible is rarely beneficial to them. The greatest approach to reaching universality is not by universality based on supposition but rather by a thorough comprehension of known concrete cases and a study of their essence to uncover a fundamental common solution. Simplicity is the outcome of practical experience.&#xA;Simplifying an architectural design over adding more features makes it easier to choose between two options that are equivalent in every other way. Choose a more straightforward and needs-based solution over a more complex and adaptable one when there are two options.</description>
    </item>
    <item>
      <title>Business runs everything</title>
      <link>http://localhost:1313/posts/business-runs-everything/</link>
      <pubDate>Fri, 17 May 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/business-runs-everything/</guid>
      <description>When it comes to the creation of corporate software applications, the architect should serve as a sort of intermediary within the organization between the technical and business communities, representing and defending the interests of each while frequently mediating disputes and letting the business run its operations. The commercial goals of the organization and its external environment must inform the architect&amp;rsquo;s technological decisions.&#xA;A software development company typically plans and advertises the intended return on investment (ROI) prior to starting a software development project. This signal must be accepted by the architect, along with the ensuing restrictions on the product&amp;rsquo;s value for the business.This will assist in avoiding technological solutions that can result in exorbitant costs. When discussing the technical architecture and implementation with the development team, as well as when interacting with management (in the process of figuring out how to strike a balance between the cost and benefit of a given function), the return rate ought to play a significant role in the overall target context.</description>
    </item>
    <item>
      <title>Database as Fortress</title>
      <link>http://localhost:1313/posts/database-as-fortress/</link>
      <pubDate>Fri, 17 May 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/database-as-fortress/</guid>
      <description>All information, both entered by staff members and received from clients, is kept in the database datax. Data remains constant despite changes in user interfaces, business logic, applied logic, and even personnel.The significance of developing a trustworthy data model early on in the project cannot be overstated.&#xA;The days of prewriting intricate, detailed technical specifications are long gone! Early and frequent product delivery is required by the new school.It is preferable to write one line of vulnerable code than ten lines in your mind.It seems too good to be true, at least when it comes to the facts.&#xA;Although user interfaces and business logic change quickly, data structures and their connections typically do not. As a result, it&amp;rsquo;s critical to establish a precise definition of the data model early on, both structurally and analytically.</description>
    </item>
    <item>
      <title>Ensure continuous integration</title>
      <link>http://localhost:1313/posts/ensure-continuous-integration/</link>
      <pubDate>Sat, 11 May 2024 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/ensure-continuous-integration/</guid>
      <description>The collection no longer serves as the project&amp;rsquo;s &amp;ldquo;Big Bang&amp;rdquo; in terms of design. In every project, architects should promote the use of continuous integration techniques and technologies, both at the corporate and application levels.&#xA;Martin Fowler originally suggested the term continuous integration (CI) as a design template. It refers to a collection of techniques and equipment that guarantees consistent, automated application testing and assembly across brief intervals of time (sometimes on an integration server specifically created to carry out these tasks). Continuous integration, which combines automated assembly tools with modular testing techniques and tools, is now required for all modern software projects.&#xA;The project&amp;rsquo;s components are now assembled and put to the test. These days, continuous integration has taken the position of &amp;ldquo;early and frequent assembly.</description>
    </item>
  </channel>
</rss>
